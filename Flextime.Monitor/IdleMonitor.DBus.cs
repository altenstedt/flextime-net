// Generated by "dotnet dbus codegen --protocol-api --service org.gnome.Mutter.IdleMonitor"
// on a Fedora 40 Workstation system.  I have updated to mitigate nullable warnings.
namespace IdleMonitor.DBus
{
    using System;
    using Tmds.DBus.Protocol;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    partial class Notifications : IdleMonitorObject
    {
        private const string __Interface = "org.gtk.Notifications";
        public Notifications(IdleMonitorService service, ObjectPath path) : base(service, path)
        { }
        public Task AddNotificationAsync(string appId, string id, Dictionary<string, Variant> notification)
        {
            return this.Connection.CallMethodAsync(CreateMessage());
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    signature: "ssa{sv}",
                    member: "AddNotification");
                writer.WriteString(appId);
                writer.WriteString(id);
                writer.WriteDictionary(notification);
                return writer.CreateMessage();
            }
        }
        public Task RemoveNotificationAsync(string appId, string id)
        {
            return this.Connection.CallMethodAsync(CreateMessage());
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    signature: "ss",
                    member: "RemoveNotification");
                writer.WriteString(appId);
                writer.WriteString(id);
                return writer.CreateMessage();
            }
        }
    }
    partial class MountOperationHandler : IdleMonitorObject
    {
        private const string __Interface = "org.Gtk.MountOperationHandler";
        public MountOperationHandler(IdleMonitorService service, ObjectPath path) : base(service, path)
        { }
        public Task<(uint Response, Dictionary<string, VariantValue> ResponseDetails)> AskPasswordAsync(string objectId, string message, string iconName, string defaultUser, string defaultDomain, uint flags)
        {
            return this.Connection.CallMethodAsync(CreateMessage(), (Message m, object? s) => ReadMessage_uaesv(m, (IdleMonitorObject)s!), this);
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    signature: "sssssu",
                    member: "AskPassword");
                writer.WriteString(objectId);
                writer.WriteString(message);
                writer.WriteString(iconName);
                writer.WriteString(defaultUser);
                writer.WriteString(defaultDomain);
                writer.WriteUInt32(flags);
                return writer.CreateMessage();
            }
        }
        public Task<(uint Response, Dictionary<string, VariantValue> ResponseDetails)> AskQuestionAsync(string objectId, string message, string iconName, string[] choices)
        {
            return this.Connection.CallMethodAsync(CreateMessage(), (Message m, object? s) => ReadMessage_uaesv(m, (IdleMonitorObject)s!), this);
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    signature: "sssas",
                    member: "AskQuestion");
                writer.WriteString(objectId);
                writer.WriteString(message);
                writer.WriteString(iconName);
                writer.WriteArray(choices);
                return writer.CreateMessage();
            }
        }
        public Task<(uint Response, Dictionary<string, VariantValue> ResponseDetails)> ShowProcessesAsync(string objectId, string message, string iconName, int[] applicationPids, string[] choices)
        {
            return this.Connection.CallMethodAsync(CreateMessage(), (Message m, object? s) => ReadMessage_uaesv(m, (IdleMonitorObject)s!), this);
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    signature: "sssaias",
                    member: "ShowProcesses");
                writer.WriteString(objectId);
                writer.WriteString(message);
                writer.WriteString(iconName);
                writer.WriteArray(applicationPids);
                writer.WriteArray(choices);
                return writer.CreateMessage();
            }
        }
        public Task CloseAsync()
        {
            return this.Connection.CallMethodAsync(CreateMessage());
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    member: "Close");
                return writer.CreateMessage();
            }
        }
    }
    record ProfilerProperties
    {
        public Dictionary<string, VariantValue> Capabilities { get; set; } = default!;
    }
    partial class Profiler : IdleMonitorObject
    {
        private const string __Interface = "org.gnome.Sysprof3.Profiler";
        public Profiler(IdleMonitorService service, ObjectPath path) : base(service, path)
        { }
        public Task StartAsync(Dictionary<string, Variant> options, System.Runtime.InteropServices.SafeHandle fd)
        {
            return this.Connection.CallMethodAsync(CreateMessage());
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    signature: "a{sv}h",
                    member: "Start");
                writer.WriteDictionary(options);
                writer.WriteHandle(fd);
                return writer.CreateMessage();
            }
        }
        public Task StopAsync()
        {
            return this.Connection.CallMethodAsync(CreateMessage());
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    member: "Stop");
                return writer.CreateMessage();
            }
        }
        public Task SetCapabilitiesAsync(Dictionary<string, Variant> value)
        {
            return this.Connection.CallMethodAsync(CreateMessage());
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: "org.freedesktop.DBus.Properties",
                    signature: "ssv",
                    member: "Set");
                writer.WriteString(__Interface);
                writer.WriteString("Capabilities");
                writer.WriteSignature("a{sv}");
                writer.WriteDictionary(value);
                return writer.CreateMessage();
            }
        }
        public Task<Dictionary<string, VariantValue>> GetCapabilitiesAsync()
            => this.Connection.CallMethodAsync(CreateGetPropertyMessage(__Interface, "Capabilities"), (Message m, object? s) => ReadMessage_v_aesv(m, (IdleMonitorObject)s!), this);
        public Task<ProfilerProperties> GetPropertiesAsync()
        {
            return this.Connection.CallMethodAsync(CreateGetAllPropertiesMessage(__Interface), (Message m, object? s) => ReadMessage(m, (IdleMonitorObject)s!), this);
            static ProfilerProperties ReadMessage(Message message, IdleMonitorObject _)
            {
                var reader = message.GetBodyReader();
                return ReadProperties(ref reader);
            }
        }
        public ValueTask<IDisposable> WatchPropertiesChangedAsync(Action<Exception?, PropertyChanges<ProfilerProperties>> handler, bool emitOnCapturedContext = true, ObserverFlags flags = ObserverFlags.None)
        {
            return base.WatchPropertiesChangedAsync(__Interface, (Message m, object? s) => ReadMessage(m, (IdleMonitorObject)s!), handler, emitOnCapturedContext, flags);
            static PropertyChanges<ProfilerProperties> ReadMessage(Message message, IdleMonitorObject _)
            {
                var reader = message.GetBodyReader();
                reader.ReadString(); // interface
                List<string> changed = new(), invalidated = new();
                return new PropertyChanges<ProfilerProperties>(ReadProperties(ref reader, changed), changed.ToArray(), ReadInvalidated(ref reader));
            }
            static string[] ReadInvalidated(ref Reader reader)
            {
                List<string>? invalidated = null;
                ArrayEnd arrayEnd = reader.ReadArrayStart(DBusType.String);
                while (reader.HasNext(arrayEnd))
                {
                    invalidated ??= new();
                    var property = reader.ReadString();
                    switch (property)
                    {
                        case "Capabilities": invalidated.Add("Capabilities"); break;
                    }
                }
                return invalidated?.ToArray() ?? Array.Empty<string>();
            }
        }
        private static ProfilerProperties ReadProperties(ref Reader reader, List<string>? changedList = null)
        {
            var props = new ProfilerProperties();
            ArrayEnd arrayEnd = reader.ReadArrayStart(DBusType.Struct);
            while (reader.HasNext(arrayEnd))
            {
                var property = reader.ReadString();
                switch (property)
                {
                    case "Capabilities":
                        reader.ReadSignature("a{sv}");
                        props.Capabilities = reader.ReadDictionaryOfStringToVariantValue();
                        changedList?.Add("Capabilities");
                        break;
                    default:
                        reader.ReadVariantValue();
                        break;
                }
            }
            return props;
        }
    }
    record ShellProperties
    {
        public string Mode { get; set; } = default!;
        public bool OverviewActive { get; set; } = default!;
        public string ShellVersion { get; set; } = default!;
    }
    partial class Shell : IdleMonitorObject
    {
        private const string __Interface = "org.gnome.Shell";
        public Shell(IdleMonitorService service, ObjectPath path) : base(service, path)
        { }
        public Task<(bool Success, string Result)> EvalAsync(string script)
        {
            return this.Connection.CallMethodAsync(CreateMessage(), (Message m, object? s) => ReadMessage_bs(m, (IdleMonitorObject)s!), this);
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    signature: "s",
                    member: "Eval");
                writer.WriteString(script);
                return writer.CreateMessage();
            }
        }
        public Task FocusSearchAsync()
        {
            return this.Connection.CallMethodAsync(CreateMessage());
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    member: "FocusSearch");
                return writer.CreateMessage();
            }
        }
        public Task ShowOSDAsync(Dictionary<string, Variant> @params)
        {
            return this.Connection.CallMethodAsync(CreateMessage());
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    signature: "a{sv}",
                    member: "ShowOSD");
                writer.WriteDictionary(@params);
                return writer.CreateMessage();
            }
        }
        public Task ShowMonitorLabelsAsync(Dictionary<string, Variant> @params)
        {
            return this.Connection.CallMethodAsync(CreateMessage());
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    signature: "a{sv}",
                    member: "ShowMonitorLabels");
                writer.WriteDictionary(@params);
                return writer.CreateMessage();
            }
        }
        public Task HideMonitorLabelsAsync()
        {
            return this.Connection.CallMethodAsync(CreateMessage());
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    member: "HideMonitorLabels");
                return writer.CreateMessage();
            }
        }
        public Task FocusAppAsync(string id)
        {
            return this.Connection.CallMethodAsync(CreateMessage());
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    signature: "s",
                    member: "FocusApp");
                writer.WriteString(id);
                return writer.CreateMessage();
            }
        }
        public Task ShowApplicationsAsync()
        {
            return this.Connection.CallMethodAsync(CreateMessage());
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    member: "ShowApplications");
                return writer.CreateMessage();
            }
        }
        public Task<uint> GrabAcceleratorAsync(string accelerator, uint modeFlags, uint grabFlags)
        {
            return this.Connection.CallMethodAsync(CreateMessage(), (Message m, object? s) => ReadMessage_u(m, (IdleMonitorObject)s!), this);
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    signature: "suu",
                    member: "GrabAccelerator");
                writer.WriteString(accelerator);
                writer.WriteUInt32(modeFlags);
                writer.WriteUInt32(grabFlags);
                return writer.CreateMessage();
            }
        }
        public Task<uint[]> GrabAcceleratorsAsync((string, uint, uint)[] accelerators)
        {
            return this.Connection.CallMethodAsync(CreateMessage(), (Message m, object? s) => ReadMessage_au(m, (IdleMonitorObject)s!), this);
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    signature: "a(suu)",
                    member: "GrabAccelerators");
                WriteType_arsuuz(ref writer, accelerators);
                return writer.CreateMessage();
            }
        }
        public Task<bool> UngrabAcceleratorAsync(uint action)
        {
            return this.Connection.CallMethodAsync(CreateMessage(), (Message m, object? s) => ReadMessage_b(m, (IdleMonitorObject)s!), this);
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    signature: "u",
                    member: "UngrabAccelerator");
                writer.WriteUInt32(action);
                return writer.CreateMessage();
            }
        }
        public Task<bool> UngrabAcceleratorsAsync(uint[] action)
        {
            return this.Connection.CallMethodAsync(CreateMessage(), (Message m, object? s) => ReadMessage_b(m, (IdleMonitorObject)s!), this);
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    signature: "au",
                    member: "UngrabAccelerators");
                writer.WriteArray(action);
                return writer.CreateMessage();
            }
        }
        public Task ScreenTransitionAsync()
        {
            return this.Connection.CallMethodAsync(CreateMessage());
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    member: "ScreenTransition");
                return writer.CreateMessage();
            }
        }
        public ValueTask<IDisposable> WatchAcceleratorActivatedAsync(Action<Exception?, (uint Action, Dictionary<string, VariantValue> Parameters)> handler, bool emitOnCapturedContext = true, ObserverFlags flags = ObserverFlags.None)
            => base.WatchSignalAsync(Service.Destination, __Interface, Path, "AcceleratorActivated", (Message m, object? s) => ReadMessage_uaesv(m, (IdleMonitorObject)s!), handler, emitOnCapturedContext, flags);
        public Task SetModeAsync(string value)
        {
            return this.Connection.CallMethodAsync(CreateMessage());
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: "org.freedesktop.DBus.Properties",
                    signature: "ssv",
                    member: "Set");
                writer.WriteString(__Interface);
                writer.WriteString("Mode");
                writer.WriteSignature("s");
                writer.WriteString(value);
                return writer.CreateMessage();
            }
        }
        public Task SetOverviewActiveAsync(bool value)
        {
            return this.Connection.CallMethodAsync(CreateMessage());
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: "org.freedesktop.DBus.Properties",
                    signature: "ssv",
                    member: "Set");
                writer.WriteString(__Interface);
                writer.WriteString("OverviewActive");
                writer.WriteSignature("b");
                writer.WriteBool(value);
                return writer.CreateMessage();
            }
        }
        public Task SetShellVersionAsync(string value)
        {
            return this.Connection.CallMethodAsync(CreateMessage());
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: "org.freedesktop.DBus.Properties",
                    signature: "ssv",
                    member: "Set");
                writer.WriteString(__Interface);
                writer.WriteString("ShellVersion");
                writer.WriteSignature("s");
                writer.WriteString(value);
                return writer.CreateMessage();
            }
        }
        public Task<string> GetModeAsync()
            => this.Connection.CallMethodAsync(CreateGetPropertyMessage(__Interface, "Mode"), (Message m, object? s) => ReadMessage_v_s(m, (IdleMonitorObject)s!), this);
        public Task<bool> GetOverviewActiveAsync()
            => this.Connection.CallMethodAsync(CreateGetPropertyMessage(__Interface, "OverviewActive"), (Message m, object? s) => ReadMessage_v_b(m, (IdleMonitorObject)s!), this);
        public Task<string> GetShellVersionAsync()
            => this.Connection.CallMethodAsync(CreateGetPropertyMessage(__Interface, "ShellVersion"), (Message m, object? s) => ReadMessage_v_s(m, (IdleMonitorObject)s!), this);
        public Task<ShellProperties> GetPropertiesAsync()
        {
            return this.Connection.CallMethodAsync(CreateGetAllPropertiesMessage(__Interface), (Message m, object? s) => ReadMessage(m, (IdleMonitorObject)s!), this);
            static ShellProperties ReadMessage(Message message, IdleMonitorObject _)
            {
                var reader = message.GetBodyReader();
                return ReadProperties(ref reader);
            }
        }
        public ValueTask<IDisposable> WatchPropertiesChangedAsync(Action<Exception?, PropertyChanges<ShellProperties>> handler, bool emitOnCapturedContext = true, ObserverFlags flags = ObserverFlags.None)
        {
            return base.WatchPropertiesChangedAsync(__Interface, (Message m, object? s) => ReadMessage(m, (IdleMonitorObject)s!), handler, emitOnCapturedContext, flags);
            static PropertyChanges<ShellProperties> ReadMessage(Message message, IdleMonitorObject _)
            {
                var reader = message.GetBodyReader();
                reader.ReadString(); // interface
                List<string> changed = new(), invalidated = new();
                return new PropertyChanges<ShellProperties>(ReadProperties(ref reader, changed), changed.ToArray(), ReadInvalidated(ref reader));
            }
            static string[] ReadInvalidated(ref Reader reader)
            {
                List<string>? invalidated = null;
                ArrayEnd arrayEnd = reader.ReadArrayStart(DBusType.String);
                while (reader.HasNext(arrayEnd))
                {
                    invalidated ??= new();
                    var property = reader.ReadString();
                    switch (property)
                    {
                        case "Mode": invalidated.Add("Mode"); break;
                        case "OverviewActive": invalidated.Add("OverviewActive"); break;
                        case "ShellVersion": invalidated.Add("ShellVersion"); break;
                    }
                }
                return invalidated?.ToArray() ?? Array.Empty<string>();
            }
        }
        private static ShellProperties ReadProperties(ref Reader reader, List<string>? changedList = null)
        {
            var props = new ShellProperties();
            ArrayEnd arrayEnd = reader.ReadArrayStart(DBusType.Struct);
            while (reader.HasNext(arrayEnd))
            {
                var property = reader.ReadString();
                switch (property)
                {
                    case "Mode":
                        reader.ReadSignature("s");
                        props.Mode = reader.ReadString();
                        changedList?.Add("Mode");
                        break;
                    case "OverviewActive":
                        reader.ReadSignature("b");
                        props.OverviewActive = reader.ReadBool();
                        changedList?.Add("OverviewActive");
                        break;
                    case "ShellVersion":
                        reader.ReadSignature("s");
                        props.ShellVersion = reader.ReadString();
                        changedList?.Add("ShellVersion");
                        break;
                    default:
                        reader.ReadVariantValue();
                        break;
                }
            }
            return props;
        }
    }
    record ExtensionsProperties
    {
        public string ShellVersion { get; set; } = default!;
        public bool UserExtensionsEnabled { get; set; } = default!;
    }
    partial class Extensions : IdleMonitorObject
    {
        private const string __Interface = "org.gnome.Shell.Extensions";
        public Extensions(IdleMonitorService service, ObjectPath path) : base(service, path)
        { }
        public Task<Dictionary<string, Dictionary<string, VariantValue>>> ListExtensionsAsync()
        {
            return this.Connection.CallMethodAsync(CreateMessage(), (Message m, object? s) => ReadMessage_aesaesv(m, (IdleMonitorObject)s!), this);
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    member: "ListExtensions");
                return writer.CreateMessage();
            }
        }
        public Task<Dictionary<string, VariantValue>> GetExtensionInfoAsync(string uuid)
        {
            return this.Connection.CallMethodAsync(CreateMessage(), (Message m, object? s) => ReadMessage_aesv(m, (IdleMonitorObject)s!), this);
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    signature: "s",
                    member: "GetExtensionInfo");
                writer.WriteString(uuid);
                return writer.CreateMessage();
            }
        }
        public Task<string[]> GetExtensionErrorsAsync(string uuid)
        {
            return this.Connection.CallMethodAsync(CreateMessage(), (Message m, object? s) => ReadMessage_as(m, (IdleMonitorObject)s!), this);
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    signature: "s",
                    member: "GetExtensionErrors");
                writer.WriteString(uuid);
                return writer.CreateMessage();
            }
        }
        public Task<string> InstallRemoteExtensionAsync(string uuid)
        {
            return this.Connection.CallMethodAsync(CreateMessage(), (Message m, object? s) => ReadMessage_s(m, (IdleMonitorObject)s!), this);
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    signature: "s",
                    member: "InstallRemoteExtension");
                writer.WriteString(uuid);
                return writer.CreateMessage();
            }
        }
        public Task<bool> UninstallExtensionAsync(string uuid)
        {
            return this.Connection.CallMethodAsync(CreateMessage(), (Message m, object? s) => ReadMessage_b(m, (IdleMonitorObject)s!), this);
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    signature: "s",
                    member: "UninstallExtension");
                writer.WriteString(uuid);
                return writer.CreateMessage();
            }
        }
        public Task ReloadExtensionAsync(string uuid)
        {
            return this.Connection.CallMethodAsync(CreateMessage());
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    signature: "s",
                    member: "ReloadExtension");
                writer.WriteString(uuid);
                return writer.CreateMessage();
            }
        }
        public Task<bool> EnableExtensionAsync(string uuid)
        {
            return this.Connection.CallMethodAsync(CreateMessage(), (Message m, object? s) => ReadMessage_b(m, (IdleMonitorObject)s!), this);
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    signature: "s",
                    member: "EnableExtension");
                writer.WriteString(uuid);
                return writer.CreateMessage();
            }
        }
        public Task<bool> DisableExtensionAsync(string uuid)
        {
            return this.Connection.CallMethodAsync(CreateMessage(), (Message m, object? s) => ReadMessage_b(m, (IdleMonitorObject)s!), this);
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    signature: "s",
                    member: "DisableExtension");
                writer.WriteString(uuid);
                return writer.CreateMessage();
            }
        }
        public Task LaunchExtensionPrefsAsync(string uuid)
        {
            return this.Connection.CallMethodAsync(CreateMessage());
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    signature: "s",
                    member: "LaunchExtensionPrefs");
                writer.WriteString(uuid);
                return writer.CreateMessage();
            }
        }
        public Task OpenExtensionPrefsAsync(string uuid, string parentWindow, Dictionary<string, Variant> options)
        {
            return this.Connection.CallMethodAsync(CreateMessage());
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    signature: "ssa{sv}",
                    member: "OpenExtensionPrefs");
                writer.WriteString(uuid);
                writer.WriteString(parentWindow);
                writer.WriteDictionary(options);
                return writer.CreateMessage();
            }
        }
        public Task CheckForUpdatesAsync()
        {
            return this.Connection.CallMethodAsync(CreateMessage());
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    member: "CheckForUpdates");
                return writer.CreateMessage();
            }
        }
        public ValueTask<IDisposable> WatchExtensionStateChangedAsync(Action<Exception?, (string Uuid, Dictionary<string, VariantValue> State)> handler, bool emitOnCapturedContext = true, ObserverFlags flags = ObserverFlags.None)
            => base.WatchSignalAsync(Service.Destination, __Interface, Path, "ExtensionStateChanged", (Message m, object? s) => ReadMessage_saesv(m, (IdleMonitorObject)s!), handler, emitOnCapturedContext, flags);
        public ValueTask<IDisposable> WatchExtensionStatusChangedAsync(Action<Exception?, (string Uuid, int State, string Error)> handler, bool emitOnCapturedContext = true, ObserverFlags flags = ObserverFlags.None)
            => base.WatchSignalAsync(Service.Destination, __Interface, Path, "ExtensionStatusChanged", (Message m, object? s) => ReadMessage_sis(m, (IdleMonitorObject)s!), handler, emitOnCapturedContext, flags);
        public Task SetShellVersionAsync(string value)
        {
            return this.Connection.CallMethodAsync(CreateMessage());
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: "org.freedesktop.DBus.Properties",
                    signature: "ssv",
                    member: "Set");
                writer.WriteString(__Interface);
                writer.WriteString("ShellVersion");
                writer.WriteSignature("s");
                writer.WriteString(value);
                return writer.CreateMessage();
            }
        }
        public Task SetUserExtensionsEnabledAsync(bool value)
        {
            return this.Connection.CallMethodAsync(CreateMessage());
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: "org.freedesktop.DBus.Properties",
                    signature: "ssv",
                    member: "Set");
                writer.WriteString(__Interface);
                writer.WriteString("UserExtensionsEnabled");
                writer.WriteSignature("b");
                writer.WriteBool(value);
                return writer.CreateMessage();
            }
        }
        public Task<string> GetShellVersionAsync()
            => this.Connection.CallMethodAsync(CreateGetPropertyMessage(__Interface, "ShellVersion"), (Message m, object? s) => ReadMessage_v_s(m, (IdleMonitorObject)s!), this);
        public Task<bool> GetUserExtensionsEnabledAsync()
            => this.Connection.CallMethodAsync(CreateGetPropertyMessage(__Interface, "UserExtensionsEnabled"), (Message m, object? s) => ReadMessage_v_b(m, (IdleMonitorObject)s!), this);
        public Task<ExtensionsProperties> GetPropertiesAsync()
        {
            return this.Connection.CallMethodAsync(CreateGetAllPropertiesMessage(__Interface), (Message m, object? s) => ReadMessage(m, (IdleMonitorObject)s!), this);
            static ExtensionsProperties ReadMessage(Message message, IdleMonitorObject _)
            {
                var reader = message.GetBodyReader();
                return ReadProperties(ref reader);
            }
        }
        public ValueTask<IDisposable> WatchPropertiesChangedAsync(Action<Exception?, PropertyChanges<ExtensionsProperties>> handler, bool emitOnCapturedContext = true, ObserverFlags flags = ObserverFlags.None)
        {
            return base.WatchPropertiesChangedAsync(__Interface, (Message m, object? s) => ReadMessage(m, (IdleMonitorObject)s!), handler, emitOnCapturedContext, flags);
            static PropertyChanges<ExtensionsProperties> ReadMessage(Message message, IdleMonitorObject _)
            {
                var reader = message.GetBodyReader();
                reader.ReadString(); // interface
                List<string> changed = new(), invalidated = new();
                return new PropertyChanges<ExtensionsProperties>(ReadProperties(ref reader, changed), changed.ToArray(), ReadInvalidated(ref reader));
            }
            static string[] ReadInvalidated(ref Reader reader)
            {
                List<string>? invalidated = null;
                ArrayEnd arrayEnd = reader.ReadArrayStart(DBusType.String);
                while (reader.HasNext(arrayEnd))
                {
                    invalidated ??= new();
                    var property = reader.ReadString();
                    switch (property)
                    {
                        case "ShellVersion": invalidated.Add("ShellVersion"); break;
                        case "UserExtensionsEnabled": invalidated.Add("UserExtensionsEnabled"); break;
                    }
                }
                return invalidated?.ToArray() ?? Array.Empty<string>();
            }
        }
        private static ExtensionsProperties ReadProperties(ref Reader reader, List<string>? changedList = null)
        {
            var props = new ExtensionsProperties();
            ArrayEnd arrayEnd = reader.ReadArrayStart(DBusType.Struct);
            while (reader.HasNext(arrayEnd))
            {
                var property = reader.ReadString();
                switch (property)
                {
                    case "ShellVersion":
                        reader.ReadSignature("s");
                        props.ShellVersion = reader.ReadString();
                        changedList?.Add("ShellVersion");
                        break;
                    case "UserExtensionsEnabled":
                        reader.ReadSignature("b");
                        props.UserExtensionsEnabled = reader.ReadBool();
                        changedList?.Add("UserExtensionsEnabled");
                        break;
                    default:
                        reader.ReadVariantValue();
                        break;
                }
            }
            return props;
        }
    }
    partial class AudioDeviceSelection : IdleMonitorObject
    {
        private const string __Interface = "org.gnome.Shell.AudioDeviceSelection";
        public AudioDeviceSelection(IdleMonitorService service, ObjectPath path) : base(service, path)
        { }
        public Task OpenAsync(string[] devices)
        {
            return this.Connection.CallMethodAsync(CreateMessage());
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    signature: "as",
                    member: "Open");
                writer.WriteArray(devices);
                return writer.CreateMessage();
            }
        }
        public Task CloseAsync()
        {
            return this.Connection.CallMethodAsync(CreateMessage());
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    member: "Close");
                return writer.CreateMessage();
            }
        }
        public ValueTask<IDisposable> WatchDeviceSelectedAsync(Action<Exception?, string> handler, bool emitOnCapturedContext = true, ObserverFlags flags = ObserverFlags.None)
            => base.WatchSignalAsync(Service.Destination, __Interface, Path, "DeviceSelected", (Message m, object? s) => ReadMessage_s(m, (IdleMonitorObject)s!), handler, emitOnCapturedContext, flags);
    }
    partial class PadOsd : IdleMonitorObject
    {
        private const string __Interface = "org.gnome.Shell.Wacom.PadOsd";
        public PadOsd(IdleMonitorService service, ObjectPath path) : base(service, path)
        { }
        public Task ShowAsync(ObjectPath deviceNode, bool editionMode)
        {
            return this.Connection.CallMethodAsync(CreateMessage());
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    signature: "ob",
                    member: "Show");
                writer.WriteObjectPath(deviceNode);
                writer.WriteBool(editionMode);
                return writer.CreateMessage();
            }
        }
    }
    record IntrospectProperties
    {
        public bool AnimationsEnabled { get; set; } = default!;
        public (int, int) ScreenSize { get; set; } = default!;
        public uint Version { get; set; } = default!;
    }
    partial class Introspect : IdleMonitorObject
    {
        private const string __Interface = "org.gnome.Shell.Introspect";
        public Introspect(IdleMonitorService service, ObjectPath path) : base(service, path)
        { }
        public Task<Dictionary<string, Dictionary<string, VariantValue>>> GetRunningApplicationsAsync()
        {
            return this.Connection.CallMethodAsync(CreateMessage(), (Message m, object? s) => ReadMessage_aesaesv(m, (IdleMonitorObject)s!), this);
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    member: "GetRunningApplications");
                return writer.CreateMessage();
            }
        }
        public Task<Dictionary<ulong, Dictionary<string, VariantValue>>> GetWindowsAsync()
        {
            return this.Connection.CallMethodAsync(CreateMessage(), (Message m, object? s) => ReadMessage_aetaesv(m, (IdleMonitorObject)s!), this);
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    member: "GetWindows");
                return writer.CreateMessage();
            }
        }
        public ValueTask<IDisposable> WatchRunningApplicationsChangedAsync(Action<Exception?> handler, bool emitOnCapturedContext = true, ObserverFlags flags = ObserverFlags.None)
            => base.WatchSignalAsync(Service.Destination, __Interface, Path, "RunningApplicationsChanged", handler, emitOnCapturedContext, flags);
        public ValueTask<IDisposable> WatchWindowsChangedAsync(Action<Exception?> handler, bool emitOnCapturedContext = true, ObserverFlags flags = ObserverFlags.None)
            => base.WatchSignalAsync(Service.Destination, __Interface, Path, "WindowsChanged", handler, emitOnCapturedContext, flags);
        public Task SetAnimationsEnabledAsync(bool value)
        {
            return this.Connection.CallMethodAsync(CreateMessage());
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: "org.freedesktop.DBus.Properties",
                    signature: "ssv",
                    member: "Set");
                writer.WriteString(__Interface);
                writer.WriteString("AnimationsEnabled");
                writer.WriteSignature("b");
                writer.WriteBool(value);
                return writer.CreateMessage();
            }
        }
        public Task SetScreenSizeAsync((int, int) value)
        {
            return this.Connection.CallMethodAsync(CreateMessage());
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: "org.freedesktop.DBus.Properties",
                    signature: "ssv",
                    member: "Set");
                writer.WriteString(__Interface);
                writer.WriteString("ScreenSize");
                writer.WriteSignature("(ii)");
                WriteType_riiz(ref writer, value);
                return writer.CreateMessage();
            }
        }
        public Task SetVersionAsync(uint value)
        {
            return this.Connection.CallMethodAsync(CreateMessage());
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: "org.freedesktop.DBus.Properties",
                    signature: "ssv",
                    member: "Set");
                writer.WriteString(__Interface);
                writer.WriteString("version");
                writer.WriteSignature("u");
                writer.WriteUInt32(value);
                return writer.CreateMessage();
            }
        }
        public Task<bool> GetAnimationsEnabledAsync()
            => this.Connection.CallMethodAsync(CreateGetPropertyMessage(__Interface, "AnimationsEnabled"), (Message m, object? s) => ReadMessage_v_b(m, (IdleMonitorObject)s!), this);
        public Task<(int, int)> GetScreenSizeAsync()
            => this.Connection.CallMethodAsync(CreateGetPropertyMessage(__Interface, "ScreenSize"), (Message m, object? s) => ReadMessage_v_riiz(m, (IdleMonitorObject)s!), this);
        public Task<uint> GetVersionAsync()
            => this.Connection.CallMethodAsync(CreateGetPropertyMessage(__Interface, "version"), (Message m, object? s) => ReadMessage_v_u(m, (IdleMonitorObject)s!), this);
        public Task<IntrospectProperties> GetPropertiesAsync()
        {
            return this.Connection.CallMethodAsync(CreateGetAllPropertiesMessage(__Interface), (Message m, object? s) => ReadMessage(m, (IdleMonitorObject)s!), this);
            static IntrospectProperties ReadMessage(Message message, IdleMonitorObject _)
            {
                var reader = message.GetBodyReader();
                return ReadProperties(ref reader);
            }
        }
        public ValueTask<IDisposable> WatchPropertiesChangedAsync(Action<Exception?, PropertyChanges<IntrospectProperties>> handler, bool emitOnCapturedContext = true, ObserverFlags flags = ObserverFlags.None)
        {
            return base.WatchPropertiesChangedAsync(__Interface, (Message m, object? s) => ReadMessage(m, (IdleMonitorObject)s!), handler, emitOnCapturedContext, flags);
            static PropertyChanges<IntrospectProperties> ReadMessage(Message message, IdleMonitorObject _)
            {
                var reader = message.GetBodyReader();
                reader.ReadString(); // interface
                List<string> changed = new(), invalidated = new();
                return new PropertyChanges<IntrospectProperties>(ReadProperties(ref reader, changed), changed.ToArray(), ReadInvalidated(ref reader));
            }
            static string[] ReadInvalidated(ref Reader reader)
            {
                List<string>? invalidated = null;
                ArrayEnd arrayEnd = reader.ReadArrayStart(DBusType.String);
                while (reader.HasNext(arrayEnd))
                {
                    invalidated ??= new();
                    var property = reader.ReadString();
                    switch (property)
                    {
                        case "AnimationsEnabled": invalidated.Add("AnimationsEnabled"); break;
                        case "ScreenSize": invalidated.Add("ScreenSize"); break;
                        case "version": invalidated.Add("Version"); break;
                    }
                }
                return invalidated?.ToArray() ?? Array.Empty<string>();
            }
        }
        private static IntrospectProperties ReadProperties(ref Reader reader, List<string>? changedList = null)
        {
            var props = new IntrospectProperties();
            ArrayEnd arrayEnd = reader.ReadArrayStart(DBusType.Struct);
            while (reader.HasNext(arrayEnd))
            {
                var property = reader.ReadString();
                switch (property)
                {
                    case "AnimationsEnabled":
                        reader.ReadSignature("b");
                        props.AnimationsEnabled = reader.ReadBool();
                        changedList?.Add("AnimationsEnabled");
                        break;
                    case "ScreenSize":
                        reader.ReadSignature("(ii)");
                        props.ScreenSize = ReadType_riiz(ref reader);
                        changedList?.Add("ScreenSize");
                        break;
                    case "version":
                        reader.ReadSignature("u");
                        props.Version = reader.ReadUInt32();
                        changedList?.Add("Version");
                        break;
                    default:
                        reader.ReadVariantValue();
                        break;
                }
            }
            return props;
        }
    }
    partial class Screenshot : IdleMonitorObject
    {
        private const string __Interface = "org.gnome.Shell.Screenshot";
        public Screenshot(IdleMonitorService service, ObjectPath path) : base(service, path)
        { }
        public Task<(bool Success, string Uri)> InteractiveScreenshotAsync()
        {
            return this.Connection.CallMethodAsync(CreateMessage(), (Message m, object? s) => ReadMessage_bs(m, (IdleMonitorObject)s!), this);
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    member: "InteractiveScreenshot");
                return writer.CreateMessage();
            }
        }
        public Task<(bool Success, string FilenameUsed)> ScreenshotAsync(bool includeCursor, bool flash, string filename)
        {
            return this.Connection.CallMethodAsync(CreateMessage(), (Message m, object? s) => ReadMessage_bs(m, (IdleMonitorObject)s!), this);
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    signature: "bbs",
                    member: "Screenshot");
                writer.WriteBool(includeCursor);
                writer.WriteBool(flash);
                writer.WriteString(filename);
                return writer.CreateMessage();
            }
        }
        public Task<(bool Success, string FilenameUsed)> ScreenshotWindowAsync(bool includeFrame, bool includeCursor, bool flash, string filename)
        {
            return this.Connection.CallMethodAsync(CreateMessage(), (Message m, object? s) => ReadMessage_bs(m, (IdleMonitorObject)s!), this);
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    signature: "bbbs",
                    member: "ScreenshotWindow");
                writer.WriteBool(includeFrame);
                writer.WriteBool(includeCursor);
                writer.WriteBool(flash);
                writer.WriteString(filename);
                return writer.CreateMessage();
            }
        }
        public Task<(bool Success, string FilenameUsed)> ScreenshotAreaAsync(int x, int y, int width, int height, bool flash, string filename)
        {
            return this.Connection.CallMethodAsync(CreateMessage(), (Message m, object? s) => ReadMessage_bs(m, (IdleMonitorObject)s!), this);
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    signature: "iiiibs",
                    member: "ScreenshotArea");
                writer.WriteInt32(x);
                writer.WriteInt32(y);
                writer.WriteInt32(width);
                writer.WriteInt32(height);
                writer.WriteBool(flash);
                writer.WriteString(filename);
                return writer.CreateMessage();
            }
        }
        public Task<Dictionary<string, VariantValue>> PickColorAsync()
        {
            return this.Connection.CallMethodAsync(CreateMessage(), (Message m, object? s) => ReadMessage_aesv(m, (IdleMonitorObject)s!), this);
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    member: "PickColor");
                return writer.CreateMessage();
            }
        }
        public Task FlashAreaAsync(int x, int y, int width, int height)
        {
            return this.Connection.CallMethodAsync(CreateMessage());
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    signature: "iiii",
                    member: "FlashArea");
                writer.WriteInt32(x);
                writer.WriteInt32(y);
                writer.WriteInt32(width);
                writer.WriteInt32(height);
                return writer.CreateMessage();
            }
        }
        public Task<(int X, int Y, int Width, int Height)> SelectAreaAsync()
        {
            return this.Connection.CallMethodAsync(CreateMessage(), (Message m, object? s) => ReadMessage_iiii(m, (IdleMonitorObject)s!), this);
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    member: "SelectArea");
                return writer.CreateMessage();
            }
        }
    }
    partial class ServiceChannel : IdleMonitorObject
    {
        private const string __Interface = "org.gnome.Mutter.ServiceChannel";
        public ServiceChannel(IdleMonitorService service, ObjectPath path) : base(service, path)
        { }
        public Task<System.Runtime.InteropServices.SafeHandle?> OpenWaylandServiceConnectionAsync(uint serviceClientType)
        {
            return this.Connection.CallMethodAsync(CreateMessage(), (Message m, object? s) => ReadMessage_h(m, (IdleMonitorObject)s!), this);
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    signature: "u",
                    member: "OpenWaylandServiceConnection");
                writer.WriteUInt32(serviceClientType);
                return writer.CreateMessage();
            }
        }
    }
    record DisplayConfigProperties
    {
        public int PowerSaveMode { get; set; } = default!;
        public bool PanelOrientationManaged { get; set; } = default!;
        public bool ApplyMonitorsConfigAllowed { get; set; } = default!;
        public bool NightLightSupported { get; set; } = default!;
    }
    partial class DisplayConfig : IdleMonitorObject
    {
        private const string __Interface = "org.gnome.Mutter.DisplayConfig";
        public DisplayConfig(IdleMonitorService service, ObjectPath path) : base(service, path)
        { }
        public Task<(uint Serial, (uint, long, int, int, int, int, int, uint, uint[], Dictionary<string, VariantValue>)[] Crtcs, (uint, long, int, uint[], string, uint[], uint[], Dictionary<string, VariantValue>)[] Outputs, (uint, long, uint, uint, double, uint)[] Modes, int MaxScreenWidth, int MaxScreenHeight)> GetResourcesAsync()
        {
            return this.Connection.CallMethodAsync(CreateMessage(), (Message m, object? s) => ReadMessage_uaruxiiiiiuauaesvzaruxiausauauaesvzaruxuuduzii(m, (IdleMonitorObject)s!), this);
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    member: "GetResources");
                return writer.CreateMessage();
            }
        }
        public Task ApplyConfigurationAsync(uint serial, bool persistent, (uint, int, int, int, uint, uint[], Dictionary<string, Variant>)[] crtcs, (uint, Dictionary<string, Variant>)[] outputs)
        {
            return this.Connection.CallMethodAsync(CreateMessage());
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    signature: "uba(uiiiuaua{sv})a(ua{sv})",
                    member: "ApplyConfiguration");
                writer.WriteUInt32(serial);
                writer.WriteBool(persistent);
                WriteType_aruiiiuauaesvz(ref writer, crtcs);
                WriteType_aruaesvz(ref writer, outputs);
                return writer.CreateMessage();
            }
        }
        public Task<int> ChangeBacklightAsync(uint serial, uint output, int value)
        {
            return this.Connection.CallMethodAsync(CreateMessage(), (Message m, object? s) => ReadMessage_i(m, (IdleMonitorObject)s!), this);
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    signature: "uui",
                    member: "ChangeBacklight");
                writer.WriteUInt32(serial);
                writer.WriteUInt32(output);
                writer.WriteInt32(value);
                return writer.CreateMessage();
            }
        }
        public Task<(ushort[] Red, ushort[] Green, ushort[] Blue)> GetCrtcGammaAsync(uint serial, uint crtc)
        {
            return this.Connection.CallMethodAsync(CreateMessage(), (Message m, object? s) => ReadMessage_aqaqaq(m, (IdleMonitorObject)s!), this);
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    signature: "uu",
                    member: "GetCrtcGamma");
                writer.WriteUInt32(serial);
                writer.WriteUInt32(crtc);
                return writer.CreateMessage();
            }
        }
        public Task SetCrtcGammaAsync(uint serial, uint crtc, ushort[] red, ushort[] green, ushort[] blue)
        {
            return this.Connection.CallMethodAsync(CreateMessage());
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    signature: "uuaqaqaq",
                    member: "SetCrtcGamma");
                writer.WriteUInt32(serial);
                writer.WriteUInt32(crtc);
                writer.WriteArray(red);
                writer.WriteArray(green);
                writer.WriteArray(blue);
                return writer.CreateMessage();
            }
        }
        public Task<(uint Serial, ((string, string, string, string), (string, int, int, double, double, double[], Dictionary<string, VariantValue>)[], Dictionary<string, VariantValue>)[] Monitors, (int, int, double, uint, bool, (string, string, string, string)[], Dictionary<string, VariantValue>)[] LogicalMonitors, Dictionary<string, VariantValue> Properties)> GetCurrentStateAsync()
        {
            return this.Connection.CallMethodAsync(CreateMessage(), (Message m, object? s) => ReadMessage_uarrsssszarsiiddadaesvzaesvzariidubarsssszaesvzaesv(m, (IdleMonitorObject)s!), this);
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    member: "GetCurrentState");
                return writer.CreateMessage();
            }
        }
        public Task ApplyMonitorsConfigAsync(uint serial, uint @method, (int, int, double, uint, bool, (string, string, Dictionary<string, Variant>)[])[] logicalMonitors, Dictionary<string, Variant> properties)
        {
            return this.Connection.CallMethodAsync(CreateMessage());
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    signature: "uua(iiduba(ssa{sv}))a{sv}",
                    member: "ApplyMonitorsConfig");
                writer.WriteUInt32(serial);
                writer.WriteUInt32(@method);
                WriteType_ariidubarssaesvzz(ref writer, logicalMonitors);
                writer.WriteDictionary(properties);
                return writer.CreateMessage();
            }
        }
        public Task SetOutputCTMAsync(uint serial, uint output, (ulong, ulong, ulong, ulong, ulong, ulong, ulong, ulong, ulong) ctm)
        {
            return this.Connection.CallMethodAsync(CreateMessage());
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    signature: "uu(ttttttttt)",
                    member: "SetOutputCTM");
                writer.WriteUInt32(serial);
                writer.WriteUInt32(output);
                WriteType_rtttttttttz(ref writer, ctm);
                return writer.CreateMessage();
            }
        }
        public ValueTask<IDisposable> WatchMonitorsChangedAsync(Action<Exception?> handler, bool emitOnCapturedContext = true, ObserverFlags flags = ObserverFlags.None)
            => base.WatchSignalAsync(Service.Destination, __Interface, Path, "MonitorsChanged", handler, emitOnCapturedContext, flags);
        public Task SetPowerSaveModeAsync(int value)
        {
            return this.Connection.CallMethodAsync(CreateMessage());
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: "org.freedesktop.DBus.Properties",
                    signature: "ssv",
                    member: "Set");
                writer.WriteString(__Interface);
                writer.WriteString("PowerSaveMode");
                writer.WriteSignature("i");
                writer.WriteInt32(value);
                return writer.CreateMessage();
            }
        }
        public Task SetPanelOrientationManagedAsync(bool value)
        {
            return this.Connection.CallMethodAsync(CreateMessage());
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: "org.freedesktop.DBus.Properties",
                    signature: "ssv",
                    member: "Set");
                writer.WriteString(__Interface);
                writer.WriteString("PanelOrientationManaged");
                writer.WriteSignature("b");
                writer.WriteBool(value);
                return writer.CreateMessage();
            }
        }
        public Task SetApplyMonitorsConfigAllowedAsync(bool value)
        {
            return this.Connection.CallMethodAsync(CreateMessage());
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: "org.freedesktop.DBus.Properties",
                    signature: "ssv",
                    member: "Set");
                writer.WriteString(__Interface);
                writer.WriteString("ApplyMonitorsConfigAllowed");
                writer.WriteSignature("b");
                writer.WriteBool(value);
                return writer.CreateMessage();
            }
        }
        public Task SetNightLightSupportedAsync(bool value)
        {
            return this.Connection.CallMethodAsync(CreateMessage());
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: "org.freedesktop.DBus.Properties",
                    signature: "ssv",
                    member: "Set");
                writer.WriteString(__Interface);
                writer.WriteString("NightLightSupported");
                writer.WriteSignature("b");
                writer.WriteBool(value);
                return writer.CreateMessage();
            }
        }
        public Task<int> GetPowerSaveModeAsync()
            => this.Connection.CallMethodAsync(CreateGetPropertyMessage(__Interface, "PowerSaveMode"), (Message m, object? s) => ReadMessage_v_i(m, (IdleMonitorObject)s!), this);
        public Task<bool> GetPanelOrientationManagedAsync()
            => this.Connection.CallMethodAsync(CreateGetPropertyMessage(__Interface, "PanelOrientationManaged"), (Message m, object? s) => ReadMessage_v_b(m, (IdleMonitorObject)s!), this);
        public Task<bool> GetApplyMonitorsConfigAllowedAsync()
            => this.Connection.CallMethodAsync(CreateGetPropertyMessage(__Interface, "ApplyMonitorsConfigAllowed"), (Message m, object? s) => ReadMessage_v_b(m, (IdleMonitorObject)s!), this);
        public Task<bool> GetNightLightSupportedAsync()
            => this.Connection.CallMethodAsync(CreateGetPropertyMessage(__Interface, "NightLightSupported"), (Message m, object? s) => ReadMessage_v_b(m, (IdleMonitorObject)s!), this);
        public Task<DisplayConfigProperties> GetPropertiesAsync()
        {
            return this.Connection.CallMethodAsync(CreateGetAllPropertiesMessage(__Interface), (Message m, object? s) => ReadMessage(m, (IdleMonitorObject)s!), this);
            static DisplayConfigProperties ReadMessage(Message message, IdleMonitorObject _)
            {
                var reader = message.GetBodyReader();
                return ReadProperties(ref reader);
            }
        }
        public ValueTask<IDisposable> WatchPropertiesChangedAsync(Action<Exception?, PropertyChanges<DisplayConfigProperties>> handler, bool emitOnCapturedContext = true, ObserverFlags flags = ObserverFlags.None)
        {
            return base.WatchPropertiesChangedAsync(__Interface, (Message m, object? s) => ReadMessage(m, (IdleMonitorObject)s!), handler, emitOnCapturedContext, flags);
            static PropertyChanges<DisplayConfigProperties> ReadMessage(Message message, IdleMonitorObject _)
            {
                var reader = message.GetBodyReader();
                reader.ReadString(); // interface
                List<string> changed = new(), invalidated = new();
                return new PropertyChanges<DisplayConfigProperties>(ReadProperties(ref reader, changed), changed.ToArray(), ReadInvalidated(ref reader));
            }
            static string[] ReadInvalidated(ref Reader reader)
            {
                List<string>? invalidated = null;
                ArrayEnd arrayEnd = reader.ReadArrayStart(DBusType.String);
                while (reader.HasNext(arrayEnd))
                {
                    invalidated ??= new();
                    var property = reader.ReadString();
                    switch (property)
                    {
                        case "PowerSaveMode": invalidated.Add("PowerSaveMode"); break;
                        case "PanelOrientationManaged": invalidated.Add("PanelOrientationManaged"); break;
                        case "ApplyMonitorsConfigAllowed": invalidated.Add("ApplyMonitorsConfigAllowed"); break;
                        case "NightLightSupported": invalidated.Add("NightLightSupported"); break;
                    }
                }
                return invalidated?.ToArray() ?? Array.Empty<string>();
            }
        }
        private static DisplayConfigProperties ReadProperties(ref Reader reader, List<string>? changedList = null)
        {
            var props = new DisplayConfigProperties();
            ArrayEnd arrayEnd = reader.ReadArrayStart(DBusType.Struct);
            while (reader.HasNext(arrayEnd))
            {
                var property = reader.ReadString();
                switch (property)
                {
                    case "PowerSaveMode":
                        reader.ReadSignature("i");
                        props.PowerSaveMode = reader.ReadInt32();
                        changedList?.Add("PowerSaveMode");
                        break;
                    case "PanelOrientationManaged":
                        reader.ReadSignature("b");
                        props.PanelOrientationManaged = reader.ReadBool();
                        changedList?.Add("PanelOrientationManaged");
                        break;
                    case "ApplyMonitorsConfigAllowed":
                        reader.ReadSignature("b");
                        props.ApplyMonitorsConfigAllowed = reader.ReadBool();
                        changedList?.Add("ApplyMonitorsConfigAllowed");
                        break;
                    case "NightLightSupported":
                        reader.ReadSignature("b");
                        props.NightLightSupported = reader.ReadBool();
                        changedList?.Add("NightLightSupported");
                        break;
                    default:
                        reader.ReadVariantValue();
                        break;
                }
            }
            return props;
        }
    }
    record InputCaptureProperties
    {
        public uint SupportedCapabilities { get; set; } = default!;
    }
    partial class InputCapture : IdleMonitorObject
    {
        private const string __Interface = "org.gnome.Mutter.InputCapture";
        public InputCapture(IdleMonitorService service, ObjectPath path) : base(service, path)
        { }
        public Task<ObjectPath> CreateSessionAsync(uint capabilities)
        {
            return this.Connection.CallMethodAsync(CreateMessage(), (Message m, object? s) => ReadMessage_o(m, (IdleMonitorObject)s!), this);
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    signature: "u",
                    member: "CreateSession");
                writer.WriteUInt32(capabilities);
                return writer.CreateMessage();
            }
        }
        public Task SetSupportedCapabilitiesAsync(uint value)
        {
            return this.Connection.CallMethodAsync(CreateMessage());
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: "org.freedesktop.DBus.Properties",
                    signature: "ssv",
                    member: "Set");
                writer.WriteString(__Interface);
                writer.WriteString("SupportedCapabilities");
                writer.WriteSignature("u");
                writer.WriteUInt32(value);
                return writer.CreateMessage();
            }
        }
        public Task<uint> GetSupportedCapabilitiesAsync()
            => this.Connection.CallMethodAsync(CreateGetPropertyMessage(__Interface, "SupportedCapabilities"), (Message m, object? s) => ReadMessage_v_u(m, (IdleMonitorObject)s!), this);
        public Task<InputCaptureProperties> GetPropertiesAsync()
        {
            return this.Connection.CallMethodAsync(CreateGetAllPropertiesMessage(__Interface), (Message m, object? s) => ReadMessage(m, (IdleMonitorObject)s!), this);
            static InputCaptureProperties ReadMessage(Message message, IdleMonitorObject _)
            {
                var reader = message.GetBodyReader();
                return ReadProperties(ref reader);
            }
        }
        public ValueTask<IDisposable> WatchPropertiesChangedAsync(Action<Exception?, PropertyChanges<InputCaptureProperties>> handler, bool emitOnCapturedContext = true, ObserverFlags flags = ObserverFlags.None)
        {
            return base.WatchPropertiesChangedAsync(__Interface, (Message m, object? s) => ReadMessage(m, (IdleMonitorObject)s!), handler, emitOnCapturedContext, flags);
            static PropertyChanges<InputCaptureProperties> ReadMessage(Message message, IdleMonitorObject _)
            {
                var reader = message.GetBodyReader();
                reader.ReadString(); // interface
                List<string> changed = new(), invalidated = new();
                return new PropertyChanges<InputCaptureProperties>(ReadProperties(ref reader, changed), changed.ToArray(), ReadInvalidated(ref reader));
            }
            static string[] ReadInvalidated(ref Reader reader)
            {
                List<string>? invalidated = null;
                ArrayEnd arrayEnd = reader.ReadArrayStart(DBusType.String);
                while (reader.HasNext(arrayEnd))
                {
                    invalidated ??= new();
                    var property = reader.ReadString();
                    switch (property)
                    {
                        case "SupportedCapabilities": invalidated.Add("SupportedCapabilities"); break;
                    }
                }
                return invalidated?.ToArray() ?? Array.Empty<string>();
            }
        }
        private static InputCaptureProperties ReadProperties(ref Reader reader, List<string>? changedList = null)
        {
            var props = new InputCaptureProperties();
            ArrayEnd arrayEnd = reader.ReadArrayStart(DBusType.Struct);
            while (reader.HasNext(arrayEnd))
            {
                var property = reader.ReadString();
                switch (property)
                {
                    case "SupportedCapabilities":
                        reader.ReadSignature("u");
                        props.SupportedCapabilities = reader.ReadUInt32();
                        changedList?.Add("SupportedCapabilities");
                        break;
                    default:
                        reader.ReadVariantValue();
                        break;
                }
            }
            return props;
        }
    }
    record RemoteDesktopProperties
    {
        public uint SupportedDeviceTypes { get; set; } = default!;
        public int Version { get; set; } = default!;
    }
    partial class RemoteDesktop : IdleMonitorObject
    {
        private const string __Interface = "org.gnome.Mutter.RemoteDesktop";
        public RemoteDesktop(IdleMonitorService service, ObjectPath path) : base(service, path)
        { }
        public Task<ObjectPath> CreateSessionAsync()
        {
            return this.Connection.CallMethodAsync(CreateMessage(), (Message m, object? s) => ReadMessage_o(m, (IdleMonitorObject)s!), this);
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    member: "CreateSession");
                return writer.CreateMessage();
            }
        }
        public Task SetSupportedDeviceTypesAsync(uint value)
        {
            return this.Connection.CallMethodAsync(CreateMessage());
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: "org.freedesktop.DBus.Properties",
                    signature: "ssv",
                    member: "Set");
                writer.WriteString(__Interface);
                writer.WriteString("SupportedDeviceTypes");
                writer.WriteSignature("u");
                writer.WriteUInt32(value);
                return writer.CreateMessage();
            }
        }
        public Task SetVersionAsync(int value)
        {
            return this.Connection.CallMethodAsync(CreateMessage());
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: "org.freedesktop.DBus.Properties",
                    signature: "ssv",
                    member: "Set");
                writer.WriteString(__Interface);
                writer.WriteString("Version");
                writer.WriteSignature("i");
                writer.WriteInt32(value);
                return writer.CreateMessage();
            }
        }
        public Task<uint> GetSupportedDeviceTypesAsync()
            => this.Connection.CallMethodAsync(CreateGetPropertyMessage(__Interface, "SupportedDeviceTypes"), (Message m, object? s) => ReadMessage_v_u(m, (IdleMonitorObject)s!), this);
        public Task<int> GetVersionAsync()
            => this.Connection.CallMethodAsync(CreateGetPropertyMessage(__Interface, "Version"), (Message m, object? s) => ReadMessage_v_i(m, (IdleMonitorObject)s!), this);
        public Task<RemoteDesktopProperties> GetPropertiesAsync()
        {
            return this.Connection.CallMethodAsync(CreateGetAllPropertiesMessage(__Interface), (Message m, object? s) => ReadMessage(m, (IdleMonitorObject)s!), this);
            static RemoteDesktopProperties ReadMessage(Message message, IdleMonitorObject _)
            {
                var reader = message.GetBodyReader();
                return ReadProperties(ref reader);
            }
        }
        public ValueTask<IDisposable> WatchPropertiesChangedAsync(Action<Exception?, PropertyChanges<RemoteDesktopProperties>> handler, bool emitOnCapturedContext = true, ObserverFlags flags = ObserverFlags.None)
        {
            return base.WatchPropertiesChangedAsync(__Interface, (Message m, object? s) => ReadMessage(m, (IdleMonitorObject)s!), handler, emitOnCapturedContext, flags);
            static PropertyChanges<RemoteDesktopProperties> ReadMessage(Message message, IdleMonitorObject _)
            {
                var reader = message.GetBodyReader();
                reader.ReadString(); // interface
                List<string> changed = new(), invalidated = new();
                return new PropertyChanges<RemoteDesktopProperties>(ReadProperties(ref reader, changed), changed.ToArray(), ReadInvalidated(ref reader));
            }
            static string[] ReadInvalidated(ref Reader reader)
            {
                List<string>? invalidated = null;
                ArrayEnd arrayEnd = reader.ReadArrayStart(DBusType.String);
                while (reader.HasNext(arrayEnd))
                {
                    invalidated ??= new();
                    var property = reader.ReadString();
                    switch (property)
                    {
                        case "SupportedDeviceTypes": invalidated.Add("SupportedDeviceTypes"); break;
                        case "Version": invalidated.Add("Version"); break;
                    }
                }
                return invalidated?.ToArray() ?? Array.Empty<string>();
            }
        }
        private static RemoteDesktopProperties ReadProperties(ref Reader reader, List<string>? changedList = null)
        {
            var props = new RemoteDesktopProperties();
            ArrayEnd arrayEnd = reader.ReadArrayStart(DBusType.Struct);
            while (reader.HasNext(arrayEnd))
            {
                var property = reader.ReadString();
                switch (property)
                {
                    case "SupportedDeviceTypes":
                        reader.ReadSignature("u");
                        props.SupportedDeviceTypes = reader.ReadUInt32();
                        changedList?.Add("SupportedDeviceTypes");
                        break;
                    case "Version":
                        reader.ReadSignature("i");
                        props.Version = reader.ReadInt32();
                        changedList?.Add("Version");
                        break;
                    default:
                        reader.ReadVariantValue();
                        break;
                }
            }
            return props;
        }
    }
    record ScreenCastProperties
    {
        public int Version { get; set; } = default!;
    }
    partial class ScreenCast : IdleMonitorObject
    {
        private const string __Interface = "org.gnome.Mutter.ScreenCast";
        public ScreenCast(IdleMonitorService service, ObjectPath path) : base(service, path)
        { }
        public Task<ObjectPath> CreateSessionAsync(Dictionary<string, Variant> properties)
        {
            return this.Connection.CallMethodAsync(CreateMessage(), (Message m, object? s) => ReadMessage_o(m, (IdleMonitorObject)s!), this);
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    signature: "a{sv}",
                    member: "CreateSession");
                writer.WriteDictionary(properties);
                return writer.CreateMessage();
            }
        }
        public Task SetVersionAsync(int value)
        {
            return this.Connection.CallMethodAsync(CreateMessage());
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: "org.freedesktop.DBus.Properties",
                    signature: "ssv",
                    member: "Set");
                writer.WriteString(__Interface);
                writer.WriteString("Version");
                writer.WriteSignature("i");
                writer.WriteInt32(value);
                return writer.CreateMessage();
            }
        }
        public Task<int> GetVersionAsync()
            => this.Connection.CallMethodAsync(CreateGetPropertyMessage(__Interface, "Version"), (Message m, object? s) => ReadMessage_v_i(m, (IdleMonitorObject)s!), this);
        public Task<ScreenCastProperties> GetPropertiesAsync()
        {
            return this.Connection.CallMethodAsync(CreateGetAllPropertiesMessage(__Interface), (Message m, object? s) => ReadMessage(m, (IdleMonitorObject)s!), this);
            static ScreenCastProperties ReadMessage(Message message, IdleMonitorObject _)
            {
                var reader = message.GetBodyReader();
                return ReadProperties(ref reader);
            }
        }
        public ValueTask<IDisposable> WatchPropertiesChangedAsync(Action<Exception?, PropertyChanges<ScreenCastProperties>> handler, bool emitOnCapturedContext = true, ObserverFlags flags = ObserverFlags.None)
        {
            return base.WatchPropertiesChangedAsync(__Interface, (Message m, object? s) => ReadMessage(m, (IdleMonitorObject)s!), handler, emitOnCapturedContext, flags);
            static PropertyChanges<ScreenCastProperties> ReadMessage(Message message, IdleMonitorObject _)
            {
                var reader = message.GetBodyReader();
                reader.ReadString(); // interface
                List<string> changed = new(), invalidated = new();
                return new PropertyChanges<ScreenCastProperties>(ReadProperties(ref reader, changed), changed.ToArray(), ReadInvalidated(ref reader));
            }
            static string[] ReadInvalidated(ref Reader reader)
            {
                List<string>? invalidated = null;
                ArrayEnd arrayEnd = reader.ReadArrayStart(DBusType.String);
                while (reader.HasNext(arrayEnd))
                {
                    invalidated ??= new();
                    var property = reader.ReadString();
                    switch (property)
                    {
                        case "Version": invalidated.Add("Version"); break;
                    }
                }
                return invalidated?.ToArray() ?? Array.Empty<string>();
            }
        }
        private static ScreenCastProperties ReadProperties(ref Reader reader, List<string>? changedList = null)
        {
            var props = new ScreenCastProperties();
            ArrayEnd arrayEnd = reader.ReadArrayStart(DBusType.Struct);
            while (reader.HasNext(arrayEnd))
            {
                var property = reader.ReadString();
                switch (property)
                {
                    case "Version":
                        reader.ReadSignature("i");
                        props.Version = reader.ReadInt32();
                        changedList?.Add("Version");
                        break;
                    default:
                        reader.ReadVariantValue();
                        break;
                }
            }
            return props;
        }
    }
    partial class ObjectManager : IdleMonitorObject
    {
        private const string __Interface = "org.freedesktop.DBus.ObjectManager";
        public ObjectManager(IdleMonitorService service, ObjectPath path) : base(service, path)
        { }
        public Task<Dictionary<ObjectPath, Dictionary<string, Dictionary<string, VariantValue>>>> GetManagedObjectsAsync()
        {
            return this.Connection.CallMethodAsync(CreateMessage(), (Message m, object? s) => ReadMessage_aeoaesaesv(m, (IdleMonitorObject)s!), this);
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    member: "GetManagedObjects");
                return writer.CreateMessage();
            }
        }
        public ValueTask<IDisposable> WatchInterfacesAddedAsync(Action<Exception?, (ObjectPath ObjectPath, Dictionary<string, Dictionary<string, VariantValue>> InterfacesAndProperties)> handler, bool emitOnCapturedContext = true, ObserverFlags flags = ObserverFlags.None)
            => base.WatchSignalAsync(Service.Destination, __Interface, Path, "InterfacesAdded", (Message m, object? s) => ReadMessage_oaesaesv(m, (IdleMonitorObject)s!), handler, emitOnCapturedContext, flags);
        public ValueTask<IDisposable> WatchInterfacesRemovedAsync(Action<Exception?, (ObjectPath ObjectPath, string[] Interfaces)> handler, bool emitOnCapturedContext = true, ObserverFlags flags = ObserverFlags.None)
            => base.WatchSignalAsync(Service.Destination, __Interface, Path, "InterfacesRemoved", (Message m, object? s) => ReadMessage_oas(m, (IdleMonitorObject)s!), handler, emitOnCapturedContext, flags);
    }
    partial class IdleMonitor : IdleMonitorObject
    {
        private const string __Interface = "org.gnome.Mutter.IdleMonitor";
        public IdleMonitor(IdleMonitorService service, ObjectPath path) : base(service, path)
        { }
        public Task<ulong> GetIdletimeAsync()
        {
            return this.Connection.CallMethodAsync(CreateMessage(), (Message m, object? s) => ReadMessage_t(m, (IdleMonitorObject)s!), this);
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    member: "GetIdletime");
                return writer.CreateMessage();
            }
        }
        public Task<uint> AddIdleWatchAsync(ulong interval)
        {
            return this.Connection.CallMethodAsync(CreateMessage(), (Message m, object? s) => ReadMessage_u(m, (IdleMonitorObject)s!), this);
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    signature: "t",
                    member: "AddIdleWatch");
                writer.WriteUInt64(interval);
                return writer.CreateMessage();
            }
        }
        public Task<uint> AddUserActiveWatchAsync()
        {
            return this.Connection.CallMethodAsync(CreateMessage(), (Message m, object? s) => ReadMessage_u(m, (IdleMonitorObject)s!), this);
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    member: "AddUserActiveWatch");
                return writer.CreateMessage();
            }
        }
        public Task RemoveWatchAsync(uint id)
        {
            return this.Connection.CallMethodAsync(CreateMessage());
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    signature: "u",
                    member: "RemoveWatch");
                writer.WriteUInt32(id);
                return writer.CreateMessage();
            }
        }
        public Task ResetIdletimeAsync()
        {
            return this.Connection.CallMethodAsync(CreateMessage());
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    member: "ResetIdletime");
                return writer.CreateMessage();
            }
        }
        public ValueTask<IDisposable> WatchWatchFiredAsync(Action<Exception?, uint> handler, bool emitOnCapturedContext = true, ObserverFlags flags = ObserverFlags.None)
            => base.WatchSignalAsync(Service.Destination, __Interface, Path, "WatchFired", (Message m, object? s) => ReadMessage_u(m, (IdleMonitorObject)s!), handler, emitOnCapturedContext, flags);
    }
    partial class InputMapping : IdleMonitorObject
    {
        private const string __Interface = "org.gnome.Mutter.InputMapping";
        public InputMapping(IdleMonitorService service, ObjectPath path) : base(service, path)
        { }
        public Task<(int, int, int, int)> GetDeviceMappingAsync(ObjectPath deviceNode)
        {
            return this.Connection.CallMethodAsync(CreateMessage(), (Message m, object? s) => ReadMessage_riiiiz(m, (IdleMonitorObject)s!), this);
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    signature: "o",
                    member: "GetDeviceMapping");
                writer.WriteObjectPath(deviceNode);
                return writer.CreateMessage();
            }
        }
    }
    partial class ScreenSaver : IdleMonitorObject
    {
        private const string __Interface = "org.gnome.ScreenSaver";
        public ScreenSaver(IdleMonitorService service, ObjectPath path) : base(service, path)
        { }
        public Task LockAsync()
        {
            return this.Connection.CallMethodAsync(CreateMessage());
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    member: "Lock");
                return writer.CreateMessage();
            }
        }
        public Task<bool> GetActiveAsync()
        {
            return this.Connection.CallMethodAsync(CreateMessage(), (Message m, object? s) => ReadMessage_b(m, (IdleMonitorObject)s!), this);
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    member: "GetActive");
                return writer.CreateMessage();
            }
        }
        public Task SetActiveAsync(bool value)
        {
            return this.Connection.CallMethodAsync(CreateMessage());
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    signature: "b",
                    member: "SetActive");
                writer.WriteBool(value);
                return writer.CreateMessage();
            }
        }
        public Task<uint> GetActiveTimeAsync()
        {
            return this.Connection.CallMethodAsync(CreateMessage(), (Message m, object? s) => ReadMessage_u(m, (IdleMonitorObject)s!), this);
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    member: "GetActiveTime");
                return writer.CreateMessage();
            }
        }
        public ValueTask<IDisposable> WatchActiveChangedAsync(Action<Exception?, bool> handler, bool emitOnCapturedContext = true, ObserverFlags flags = ObserverFlags.None)
            => base.WatchSignalAsync(Service.Destination, __Interface, Path, "ActiveChanged", (Message m, object? s) => ReadMessage_b(m, (IdleMonitorObject)s!), handler, emitOnCapturedContext, flags);
        public ValueTask<IDisposable> WatchWakeUpScreenAsync(Action<Exception?> handler, bool emitOnCapturedContext = true, ObserverFlags flags = ObserverFlags.None)
            => base.WatchSignalAsync(Service.Destination, __Interface, Path, "WakeUpScreen", handler, emitOnCapturedContext, flags);
    }
    partial class EndSessionDialog : IdleMonitorObject
    {
        private const string __Interface = "org.gnome.SessionManager.EndSessionDialog";
        public EndSessionDialog(IdleMonitorService service, ObjectPath path) : base(service, path)
        { }
        public Task OpenAsync(uint arg0, uint arg1, uint arg2, ObjectPath[] arg3)
        {
            return this.Connection.CallMethodAsync(CreateMessage());
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    signature: "uuuao",
                    member: "Open");
                writer.WriteUInt32(arg0);
                writer.WriteUInt32(arg1);
                writer.WriteUInt32(arg2);
                writer.WriteArray(arg3);
                return writer.CreateMessage();
            }
        }
        public Task CloseAsync()
        {
            return this.Connection.CallMethodAsync(CreateMessage());
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    member: "Close");
                return writer.CreateMessage();
            }
        }
        public ValueTask<IDisposable> WatchConfirmedLogoutAsync(Action<Exception?> handler, bool emitOnCapturedContext = true, ObserverFlags flags = ObserverFlags.None)
            => base.WatchSignalAsync(Service.Destination, __Interface, Path, "ConfirmedLogout", handler, emitOnCapturedContext, flags);
        public ValueTask<IDisposable> WatchConfirmedRebootAsync(Action<Exception?> handler, bool emitOnCapturedContext = true, ObserverFlags flags = ObserverFlags.None)
            => base.WatchSignalAsync(Service.Destination, __Interface, Path, "ConfirmedReboot", handler, emitOnCapturedContext, flags);
        public ValueTask<IDisposable> WatchConfirmedShutdownAsync(Action<Exception?> handler, bool emitOnCapturedContext = true, ObserverFlags flags = ObserverFlags.None)
            => base.WatchSignalAsync(Service.Destination, __Interface, Path, "ConfirmedShutdown", handler, emitOnCapturedContext, flags);
        public ValueTask<IDisposable> WatchCanceledAsync(Action<Exception?> handler, bool emitOnCapturedContext = true, ObserverFlags flags = ObserverFlags.None)
            => base.WatchSignalAsync(Service.Destination, __Interface, Path, "Canceled", handler, emitOnCapturedContext, flags);
        public ValueTask<IDisposable> WatchClosedAsync(Action<Exception?> handler, bool emitOnCapturedContext = true, ObserverFlags flags = ObserverFlags.None)
            => base.WatchSignalAsync(Service.Destination, __Interface, Path, "Closed", handler, emitOnCapturedContext, flags);
    }
    partial class Prompter : IdleMonitorObject
    {
        private const string __Interface = "org.gnome.keyring.internal.Prompter";
        public Prompter(IdleMonitorService service, ObjectPath path) : base(service, path)
        { }
        public Task BeginPromptingAsync(ObjectPath callback)
        {
            return this.Connection.CallMethodAsync(CreateMessage());
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    signature: "o",
                    member: "BeginPrompting");
                writer.WriteObjectPath(callback);
                return writer.CreateMessage();
            }
        }
        public Task PerformPromptAsync(ObjectPath callback, string @type, Dictionary<string, Variant> properties, string exchange)
        {
            return this.Connection.CallMethodAsync(CreateMessage());
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    signature: "osa{sv}s",
                    member: "PerformPrompt");
                writer.WriteObjectPath(callback);
                writer.WriteString(@type);
                writer.WriteDictionary(properties);
                writer.WriteString(exchange);
                return writer.CreateMessage();
            }
        }
        public Task StopPromptingAsync(ObjectPath callback)
        {
            return this.Connection.CallMethodAsync(CreateMessage());
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    signature: "o",
                    member: "StopPrompting");
                writer.WriteObjectPath(callback);
                return writer.CreateMessage();
            }
        }
    }
    partial class Access : IdleMonitorObject
    {
        private const string __Interface = "org.freedesktop.impl.portal.Access";
        public Access(IdleMonitorService service, ObjectPath path) : base(service, path)
        { }
        public Task<(uint Response, Dictionary<string, VariantValue> Results)> AccessDialogAsync(ObjectPath handle, string appId, string parentWindow, string title, string subtitle, string body, Dictionary<string, Variant> options)
        {
            return this.Connection.CallMethodAsync(CreateMessage(), (Message m, object? s) => ReadMessage_uaesv(m, (IdleMonitorObject)s!), this);
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    signature: "osssssa{sv}",
                    member: "AccessDialog");
                writer.WriteObjectPath(handle);
                writer.WriteString(appId);
                writer.WriteString(parentWindow);
                writer.WriteString(title);
                writer.WriteString(subtitle);
                writer.WriteString(body);
                writer.WriteDictionary(options);
                return writer.CreateMessage();
            }
        }
    }
    partial class Notifications0 : IdleMonitorObject
    {
        private const string __Interface = "org.freedesktop.Notifications";
        public Notifications0(IdleMonitorService service, ObjectPath path) : base(service, path)
        { }
        public Task<uint> NotifyAsync(string arg0, uint arg1, string arg2, string arg3, string arg4, string[] arg5, Dictionary<string, Variant> arg6, int arg7)
        {
            return this.Connection.CallMethodAsync(CreateMessage(), (Message m, object? s) => ReadMessage_u(m, (IdleMonitorObject)s!), this);
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    signature: "susssasa{sv}i",
                    member: "Notify");
                writer.WriteString(arg0);
                writer.WriteUInt32(arg1);
                writer.WriteString(arg2);
                writer.WriteString(arg3);
                writer.WriteString(arg4);
                writer.WriteArray(arg5);
                writer.WriteDictionary(arg6);
                writer.WriteInt32(arg7);
                return writer.CreateMessage();
            }
        }
        public Task CloseNotificationAsync(uint arg0)
        {
            return this.Connection.CallMethodAsync(CreateMessage());
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    signature: "u",
                    member: "CloseNotification");
                writer.WriteUInt32(arg0);
                return writer.CreateMessage();
            }
        }
        public Task<string[]> GetCapabilitiesAsync()
        {
            return this.Connection.CallMethodAsync(CreateMessage(), (Message m, object? s) => ReadMessage_as(m, (IdleMonitorObject)s!), this);
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    member: "GetCapabilities");
                return writer.CreateMessage();
            }
        }
        public Task<(string Arg0, string Arg1, string Arg2, string Arg3)> GetServerInformationAsync()
        {
            return this.Connection.CallMethodAsync(CreateMessage(), (Message m, object? s) => ReadMessage_ssss(m, (IdleMonitorObject)s!), this);
            MessageBuffer CreateMessage()
            {
                var writer = this.Connection.GetMessageWriter();
                writer.WriteMethodCallHeader(
                    destination: Service.Destination,
                    path: Path,
                    @interface: __Interface,
                    member: "GetServerInformation");
                return writer.CreateMessage();
            }
        }
        public ValueTask<IDisposable> WatchNotificationClosedAsync(Action<Exception?, (uint Arg0, uint Arg1)> handler, bool emitOnCapturedContext = true, ObserverFlags flags = ObserverFlags.None)
            => base.WatchSignalAsync(Service.Destination, __Interface, Path, "NotificationClosed", (Message m, object? s) => ReadMessage_uu(m, (IdleMonitorObject)s!), handler, emitOnCapturedContext, flags);
        public ValueTask<IDisposable> WatchActionInvokedAsync(Action<Exception?, (uint Arg0, string Arg1)> handler, bool emitOnCapturedContext = true, ObserverFlags flags = ObserverFlags.None)
            => base.WatchSignalAsync(Service.Destination, __Interface, Path, "ActionInvoked", (Message m, object? s) => ReadMessage_us(m, (IdleMonitorObject)s!), handler, emitOnCapturedContext, flags);
        public ValueTask<IDisposable> WatchActivationTokenAsync(Action<Exception?, (uint Arg0, string Arg1)> handler, bool emitOnCapturedContext = true, ObserverFlags flags = ObserverFlags.None)
            => base.WatchSignalAsync(Service.Destination, __Interface, Path, "ActivationToken", (Message m, object? s) => ReadMessage_us(m, (IdleMonitorObject)s!), handler, emitOnCapturedContext, flags);
    }
    partial class IdleMonitorService
    {
        public Tmds.DBus.Protocol.Connection Connection { get; }
        public string Destination { get; }
        public IdleMonitorService(Tmds.DBus.Protocol.Connection connection, string destination)
            => (Connection, Destination) = (connection, destination);
        public Notifications CreateNotifications(string path) => new Notifications(this, path);
        public MountOperationHandler CreateMountOperationHandler(string path) => new MountOperationHandler(this, path);
        public Profiler CreateProfiler(string path) => new Profiler(this, path);
        public Shell CreateShell(string path) => new Shell(this, path);
        public Extensions CreateExtensions(string path) => new Extensions(this, path);
        public AudioDeviceSelection CreateAudioDeviceSelection(string path) => new AudioDeviceSelection(this, path);
        public PadOsd CreatePadOsd(string path) => new PadOsd(this, path);
        public Introspect CreateIntrospect(string path) => new Introspect(this, path);
        public Screenshot CreateScreenshot(string path) => new Screenshot(this, path);
        public ServiceChannel CreateServiceChannel(string path) => new ServiceChannel(this, path);
        public DisplayConfig CreateDisplayConfig(string path) => new DisplayConfig(this, path);
        public InputCapture CreateInputCapture(string path) => new InputCapture(this, path);
        public RemoteDesktop CreateRemoteDesktop(string path) => new RemoteDesktop(this, path);
        public ScreenCast CreateScreenCast(string path) => new ScreenCast(this, path);
        public ObjectManager CreateObjectManager(string path) => new ObjectManager(this, path);
        public IdleMonitor CreateIdleMonitor(string path) => new IdleMonitor(this, path);
        public InputMapping CreateInputMapping(string path) => new InputMapping(this, path);
        public ScreenSaver CreateScreenSaver(string path) => new ScreenSaver(this, path);
        public EndSessionDialog CreateEndSessionDialog(string path) => new EndSessionDialog(this, path);
        public Prompter CreatePrompter(string path) => new Prompter(this, path);
        public Access CreateAccess(string path) => new Access(this, path);
        public Notifications0 CreateNotifications0(string path) => new Notifications0(this, path);
    }
    class IdleMonitorObject
    {
        public IdleMonitorService Service { get; }
        public ObjectPath Path { get; }
        protected Tmds.DBus.Protocol.Connection Connection => Service.Connection;
        protected IdleMonitorObject(IdleMonitorService service, ObjectPath path)
            => (Service, Path) = (service, path);
        protected MessageBuffer CreateGetPropertyMessage(string @interface, string property)
        {
            var writer = this.Connection.GetMessageWriter();
            writer.WriteMethodCallHeader(
                destination: Service.Destination,
                path: Path,
                @interface: "org.freedesktop.DBus.Properties",
                signature: "ss",
                member: "Get");
            writer.WriteString(@interface);
            writer.WriteString(property);
            return writer.CreateMessage();
        }
        protected MessageBuffer CreateGetAllPropertiesMessage(string @interface)
        {
            var writer = this.Connection.GetMessageWriter();
            writer.WriteMethodCallHeader(
                destination: Service.Destination,
                path: Path,
                @interface: "org.freedesktop.DBus.Properties",
                signature: "s",
                member: "GetAll");
            writer.WriteString(@interface);
            return writer.CreateMessage();
        }
        protected ValueTask<IDisposable> WatchPropertiesChangedAsync<TProperties>(string @interface, MessageValueReader<PropertyChanges<TProperties>> reader, Action<Exception?, PropertyChanges<TProperties>> handler, bool emitOnCapturedContext, ObserverFlags flags)
        {
            var rule = new MatchRule
            {
                Type = MessageType.Signal,
                Sender = Service.Destination,
                Path = Path,
                Interface = "org.freedesktop.DBus.Properties",
                Member = "PropertiesChanged",
                Arg0 = @interface
            };
            return this.Connection.AddMatchAsync(rule, reader,
                                                    (Exception? ex, PropertyChanges<TProperties> changes, object? rs, object? hs) => ((Action<Exception?, PropertyChanges<TProperties>>)hs!).Invoke(ex, changes),
                                                    this, handler, emitOnCapturedContext, flags);
        }
        public ValueTask<IDisposable> WatchSignalAsync<TArg>(string sender, string @interface, ObjectPath path, string signal, MessageValueReader<TArg> reader, Action<Exception?, TArg> handler, bool emitOnCapturedContext, ObserverFlags flags)
        {
            var rule = new MatchRule
            {
                Type = MessageType.Signal,
                Sender = sender,
                Path = path,
                Member = signal,
                Interface = @interface
            };
            return this.Connection.AddMatchAsync(rule, reader,
                                                    (Exception? ex, TArg arg, object? rs, object? hs) => ((Action<Exception?, TArg>)hs!).Invoke(ex, arg),
                                                    this, handler, emitOnCapturedContext, flags);
        }
        public ValueTask<IDisposable> WatchSignalAsync(string sender, string @interface, ObjectPath path, string signal, Action<Exception?> handler, bool emitOnCapturedContext, ObserverFlags flags)
        {
            var rule = new MatchRule
            {
                Type = MessageType.Signal,
                Sender = sender,
                Path = path,
                Member = signal,
                Interface = @interface
            };
            return this.Connection.AddMatchAsync<object>(rule, (Message message, object? state) => null!,
                                                            (Exception? ex, object v, object? rs, object? hs) => ((Action<Exception?>)hs!).Invoke(ex), this, handler, emitOnCapturedContext, flags);
        }
        protected static (uint, Dictionary<string, VariantValue>) ReadMessage_uaesv(Message message, IdleMonitorObject _)
        {
            var reader = message.GetBodyReader();
            var arg0 = reader.ReadUInt32();
            var arg1 = reader.ReadDictionaryOfStringToVariantValue();
            return (arg0, arg1);
        }
        protected static Dictionary<string, VariantValue> ReadMessage_v_aesv(Message message, IdleMonitorObject _)
        {
            var reader = message.GetBodyReader();
            reader.ReadSignature("a{sv}");
            return reader.ReadDictionaryOfStringToVariantValue();
        }
        protected static (bool, string) ReadMessage_bs(Message message, IdleMonitorObject _)
        {
            var reader = message.GetBodyReader();
            var arg0 = reader.ReadBool();
            var arg1 = reader.ReadString();
            return (arg0, arg1);
        }
        protected static uint ReadMessage_u(Message message, IdleMonitorObject _)
        {
            var reader = message.GetBodyReader();
            return reader.ReadUInt32();
        }
        protected static uint[] ReadMessage_au(Message message, IdleMonitorObject _)
        {
            var reader = message.GetBodyReader();
            return reader.ReadArrayOfUInt32();
        }
        protected static bool ReadMessage_b(Message message, IdleMonitorObject _)
        {
            var reader = message.GetBodyReader();
            return reader.ReadBool();
        }
        protected static string ReadMessage_v_s(Message message, IdleMonitorObject _)
        {
            var reader = message.GetBodyReader();
            reader.ReadSignature("s");
            return reader.ReadString();
        }
        protected static bool ReadMessage_v_b(Message message, IdleMonitorObject _)
        {
            var reader = message.GetBodyReader();
            reader.ReadSignature("b");
            return reader.ReadBool();
        }
        protected static Dictionary<string, Dictionary<string, VariantValue>> ReadMessage_aesaesv(Message message, IdleMonitorObject _)
        {
            var reader = message.GetBodyReader();
            return ReadType_aesaesv(ref reader);
        }
        protected static Dictionary<string, VariantValue> ReadMessage_aesv(Message message, IdleMonitorObject _)
        {
            var reader = message.GetBodyReader();
            return reader.ReadDictionaryOfStringToVariantValue();
        }
        protected static string[] ReadMessage_as(Message message, IdleMonitorObject _)
        {
            var reader = message.GetBodyReader();
            return reader.ReadArrayOfString();
        }
        protected static string ReadMessage_s(Message message, IdleMonitorObject _)
        {
            var reader = message.GetBodyReader();
            return reader.ReadString();
        }
        protected static (string, Dictionary<string, VariantValue>) ReadMessage_saesv(Message message, IdleMonitorObject _)
        {
            var reader = message.GetBodyReader();
            var arg0 = reader.ReadString();
            var arg1 = reader.ReadDictionaryOfStringToVariantValue();
            return (arg0, arg1);
        }
        protected static (string, int, string) ReadMessage_sis(Message message, IdleMonitorObject _)
        {
            var reader = message.GetBodyReader();
            var arg0 = reader.ReadString();
            var arg1 = reader.ReadInt32();
            var arg2 = reader.ReadString();
            return (arg0, arg1, arg2);
        }
        protected static Dictionary<ulong, Dictionary<string, VariantValue>> ReadMessage_aetaesv(Message message, IdleMonitorObject _)
        {
            var reader = message.GetBodyReader();
            return ReadType_aetaesv(ref reader);
        }
        protected static (int, int) ReadMessage_v_riiz(Message message, IdleMonitorObject _)
        {
            var reader = message.GetBodyReader();
            reader.ReadSignature("(ii)");
            return ReadType_riiz(ref reader);
        }
        protected static uint ReadMessage_v_u(Message message, IdleMonitorObject _)
        {
            var reader = message.GetBodyReader();
            reader.ReadSignature("u");
            return reader.ReadUInt32();
        }
        protected static (int, int, int, int) ReadMessage_iiii(Message message, IdleMonitorObject _)
        {
            var reader = message.GetBodyReader();
            var arg0 = reader.ReadInt32();
            var arg1 = reader.ReadInt32();
            var arg2 = reader.ReadInt32();
            var arg3 = reader.ReadInt32();
            return (arg0, arg1, arg2, arg3);
        }
        protected static System.Runtime.InteropServices.SafeHandle? ReadMessage_h(Message message, IdleMonitorObject _)
        {
            var reader = message.GetBodyReader();
            return reader.ReadHandle<Microsoft.Win32.SafeHandles.SafeFileHandle>();
        }
        protected static (uint, (uint, long, int, int, int, int, int, uint, uint[], Dictionary<string, VariantValue>)[], (uint, long, int, uint[], string, uint[], uint[], Dictionary<string, VariantValue>)[], (uint, long, uint, uint, double, uint)[], int, int) ReadMessage_uaruxiiiiiuauaesvzaruxiausauauaesvzaruxuuduzii(Message message, IdleMonitorObject _)
        {
            var reader = message.GetBodyReader();
            var arg0 = reader.ReadUInt32();
            var arg1 = ReadType_aruxiiiiiuauaesvz(ref reader);
            var arg2 = ReadType_aruxiausauauaesvz(ref reader);
            var arg3 = ReadType_aruxuuduz(ref reader);
            var arg4 = reader.ReadInt32();
            var arg5 = reader.ReadInt32();
            return (arg0, arg1, arg2, arg3, arg4, arg5);
        }
        protected static int ReadMessage_i(Message message, IdleMonitorObject _)
        {
            var reader = message.GetBodyReader();
            return reader.ReadInt32();
        }
        protected static (ushort[], ushort[], ushort[]) ReadMessage_aqaqaq(Message message, IdleMonitorObject _)
        {
            var reader = message.GetBodyReader();
            var arg0 = reader.ReadArrayOfUInt16();
            var arg1 = reader.ReadArrayOfUInt16();
            var arg2 = reader.ReadArrayOfUInt16();
            return (arg0, arg1, arg2);
        }
        protected static (uint, ((string, string, string, string), (string, int, int, double, double, double[], Dictionary<string, VariantValue>)[], Dictionary<string, VariantValue>)[], (int, int, double, uint, bool, (string, string, string, string)[], Dictionary<string, VariantValue>)[], Dictionary<string, VariantValue>) ReadMessage_uarrsssszarsiiddadaesvzaesvzariidubarsssszaesvzaesv(Message message, IdleMonitorObject _)
        {
            var reader = message.GetBodyReader();
            var arg0 = reader.ReadUInt32();
            var arg1 = ReadType_arrsssszarsiiddadaesvzaesvz(ref reader);
            var arg2 = ReadType_ariidubarsssszaesvz(ref reader);
            var arg3 = reader.ReadDictionaryOfStringToVariantValue();
            return (arg0, arg1, arg2, arg3);
        }
        protected static int ReadMessage_v_i(Message message, IdleMonitorObject _)
        {
            var reader = message.GetBodyReader();
            reader.ReadSignature("i");
            return reader.ReadInt32();
        }
        protected static ObjectPath ReadMessage_o(Message message, IdleMonitorObject _)
        {
            var reader = message.GetBodyReader();
            return reader.ReadObjectPath();
        }
        protected static Dictionary<ObjectPath, Dictionary<string, Dictionary<string, VariantValue>>> ReadMessage_aeoaesaesv(Message message, IdleMonitorObject _)
        {
            var reader = message.GetBodyReader();
            return ReadType_aeoaesaesv(ref reader);
        }
        protected static (ObjectPath, Dictionary<string, Dictionary<string, VariantValue>>) ReadMessage_oaesaesv(Message message, IdleMonitorObject _)
        {
            var reader = message.GetBodyReader();
            var arg0 = reader.ReadObjectPath();
            var arg1 = ReadType_aesaesv(ref reader);
            return (arg0, arg1);
        }
        protected static (ObjectPath, string[]) ReadMessage_oas(Message message, IdleMonitorObject _)
        {
            var reader = message.GetBodyReader();
            var arg0 = reader.ReadObjectPath();
            var arg1 = reader.ReadArrayOfString();
            return (arg0, arg1);
        }
        protected static ulong ReadMessage_t(Message message, IdleMonitorObject _)
        {
            var reader = message.GetBodyReader();
            return reader.ReadUInt64();
        }
        protected static (int, int, int, int) ReadMessage_riiiiz(Message message, IdleMonitorObject _)
        {
            var reader = message.GetBodyReader();
            return ReadType_riiiiz(ref reader);
        }
        protected static (string, string, string, string) ReadMessage_ssss(Message message, IdleMonitorObject _)
        {
            var reader = message.GetBodyReader();
            var arg0 = reader.ReadString();
            var arg1 = reader.ReadString();
            var arg2 = reader.ReadString();
            var arg3 = reader.ReadString();
            return (arg0, arg1, arg2, arg3);
        }
        protected static (uint, uint) ReadMessage_uu(Message message, IdleMonitorObject _)
        {
            var reader = message.GetBodyReader();
            var arg0 = reader.ReadUInt32();
            var arg1 = reader.ReadUInt32();
            return (arg0, arg1);
        }
        protected static (uint, string) ReadMessage_us(Message message, IdleMonitorObject _)
        {
            var reader = message.GetBodyReader();
            var arg0 = reader.ReadUInt32();
            var arg1 = reader.ReadString();
            return (arg0, arg1);
        }
        protected static (int, int) ReadType_riiz(ref Reader reader)
        {
            return (reader.ReadInt32(), reader.ReadInt32());
        }
        protected static Dictionary<string, Dictionary<string, VariantValue>> ReadType_aesaesv(ref Reader reader)
        {
            Dictionary<string, Dictionary<string, VariantValue>> dictionary = new();
            ArrayEnd dictEnd = reader.ReadDictionaryStart();
            while (reader.HasNext(dictEnd))
            {
                var key = reader.ReadString();
                var value = reader.ReadDictionaryOfStringToVariantValue();
                dictionary[key] = value;
            }
            return dictionary;
        }
        protected static Dictionary<ulong, Dictionary<string, VariantValue>> ReadType_aetaesv(ref Reader reader)
        {
            Dictionary<ulong, Dictionary<string, VariantValue>> dictionary = new();
            ArrayEnd dictEnd = reader.ReadDictionaryStart();
            while (reader.HasNext(dictEnd))
            {
                var key = reader.ReadUInt64();
                var value = reader.ReadDictionaryOfStringToVariantValue();
                dictionary[key] = value;
            }
            return dictionary;
        }
        protected static (uint, long, int, int, int, int, int, uint, uint[], Dictionary<string, VariantValue>)[] ReadType_aruxiiiiiuauaesvz(ref Reader reader)
        {
            List<(uint, long, int, int, int, int, int, uint, uint[], Dictionary<string, VariantValue>)> list = new();
            ArrayEnd arrayEnd = reader.ReadArrayStart(DBusType.Struct);
            while (reader.HasNext(arrayEnd))
            {
                list.Add(ReadType_ruxiiiiiuauaesvz(ref reader));
            }
            return list.ToArray();
        }
        protected static (uint, long, int, int, int, int, int, uint, uint[], Dictionary<string, VariantValue>) ReadType_ruxiiiiiuauaesvz(ref Reader reader)
        {
            return (reader.ReadUInt32(), reader.ReadInt64(), reader.ReadInt32(), reader.ReadInt32(), reader.ReadInt32(), reader.ReadInt32(), reader.ReadInt32(), reader.ReadUInt32(), reader.ReadArrayOfUInt32(), reader.ReadDictionaryOfStringToVariantValue());
        }
        protected static (uint, long, int, uint[], string, uint[], uint[], Dictionary<string, VariantValue>)[] ReadType_aruxiausauauaesvz(ref Reader reader)
        {
            List<(uint, long, int, uint[], string, uint[], uint[], Dictionary<string, VariantValue>)> list = new();
            ArrayEnd arrayEnd = reader.ReadArrayStart(DBusType.Struct);
            while (reader.HasNext(arrayEnd))
            {
                list.Add(ReadType_ruxiausauauaesvz(ref reader));
            }
            return list.ToArray();
        }
        protected static (uint, long, int, uint[], string, uint[], uint[], Dictionary<string, VariantValue>) ReadType_ruxiausauauaesvz(ref Reader reader)
        {
            return (reader.ReadUInt32(), reader.ReadInt64(), reader.ReadInt32(), reader.ReadArrayOfUInt32(), reader.ReadString(), reader.ReadArrayOfUInt32(), reader.ReadArrayOfUInt32(), reader.ReadDictionaryOfStringToVariantValue());
        }
        protected static (uint, long, uint, uint, double, uint)[] ReadType_aruxuuduz(ref Reader reader)
        {
            List<(uint, long, uint, uint, double, uint)> list = new();
            ArrayEnd arrayEnd = reader.ReadArrayStart(DBusType.Struct);
            while (reader.HasNext(arrayEnd))
            {
                list.Add(ReadType_ruxuuduz(ref reader));
            }
            return list.ToArray();
        }
        protected static (uint, long, uint, uint, double, uint) ReadType_ruxuuduz(ref Reader reader)
        {
            return (reader.ReadUInt32(), reader.ReadInt64(), reader.ReadUInt32(), reader.ReadUInt32(), reader.ReadDouble(), reader.ReadUInt32());
        }
        protected static ((string, string, string, string), (string, int, int, double, double, double[], Dictionary<string, VariantValue>)[], Dictionary<string, VariantValue>)[] ReadType_arrsssszarsiiddadaesvzaesvz(ref Reader reader)
        {
            List<((string, string, string, string), (string, int, int, double, double, double[], Dictionary<string, VariantValue>)[], Dictionary<string, VariantValue>)> list = new();
            ArrayEnd arrayEnd = reader.ReadArrayStart(DBusType.Struct);
            while (reader.HasNext(arrayEnd))
            {
                list.Add(ReadType_rrsssszarsiiddadaesvzaesvz(ref reader));
            }
            return list.ToArray();
        }
        protected static ((string, string, string, string), (string, int, int, double, double, double[], Dictionary<string, VariantValue>)[], Dictionary<string, VariantValue>) ReadType_rrsssszarsiiddadaesvzaesvz(ref Reader reader)
        {
            return (ReadType_rssssz(ref reader), ReadType_arsiiddadaesvz(ref reader), reader.ReadDictionaryOfStringToVariantValue());
        }
        protected static (string, string, string, string) ReadType_rssssz(ref Reader reader)
        {
            return (reader.ReadString(), reader.ReadString(), reader.ReadString(), reader.ReadString());
        }
        protected static (string, int, int, double, double, double[], Dictionary<string, VariantValue>)[] ReadType_arsiiddadaesvz(ref Reader reader)
        {
            List<(string, int, int, double, double, double[], Dictionary<string, VariantValue>)> list = new();
            ArrayEnd arrayEnd = reader.ReadArrayStart(DBusType.Struct);
            while (reader.HasNext(arrayEnd))
            {
                list.Add(ReadType_rsiiddadaesvz(ref reader));
            }
            return list.ToArray();
        }
        protected static (string, int, int, double, double, double[], Dictionary<string, VariantValue>) ReadType_rsiiddadaesvz(ref Reader reader)
        {
            return (reader.ReadString(), reader.ReadInt32(), reader.ReadInt32(), reader.ReadDouble(), reader.ReadDouble(), reader.ReadArrayOfDouble(), reader.ReadDictionaryOfStringToVariantValue());
        }
        protected static (int, int, double, uint, bool, (string, string, string, string)[], Dictionary<string, VariantValue>)[] ReadType_ariidubarsssszaesvz(ref Reader reader)
        {
            List<(int, int, double, uint, bool, (string, string, string, string)[], Dictionary<string, VariantValue>)> list = new();
            ArrayEnd arrayEnd = reader.ReadArrayStart(DBusType.Struct);
            while (reader.HasNext(arrayEnd))
            {
                list.Add(ReadType_riidubarsssszaesvz(ref reader));
            }
            return list.ToArray();
        }
        protected static (int, int, double, uint, bool, (string, string, string, string)[], Dictionary<string, VariantValue>) ReadType_riidubarsssszaesvz(ref Reader reader)
        {
            return (reader.ReadInt32(), reader.ReadInt32(), reader.ReadDouble(), reader.ReadUInt32(), reader.ReadBool(), ReadType_arssssz(ref reader), reader.ReadDictionaryOfStringToVariantValue());
        }
        protected static (string, string, string, string)[] ReadType_arssssz(ref Reader reader)
        {
            List<(string, string, string, string)> list = new();
            ArrayEnd arrayEnd = reader.ReadArrayStart(DBusType.Struct);
            while (reader.HasNext(arrayEnd))
            {
                list.Add(ReadType_rssssz(ref reader));
            }
            return list.ToArray();
        }
        protected static Dictionary<ObjectPath, Dictionary<string, Dictionary<string, VariantValue>>> ReadType_aeoaesaesv(ref Reader reader)
        {
            Dictionary<ObjectPath, Dictionary<string, Dictionary<string, VariantValue>>> dictionary = new();
            ArrayEnd dictEnd = reader.ReadDictionaryStart();
            while (reader.HasNext(dictEnd))
            {
                var key = reader.ReadObjectPath();
                var value = ReadType_aesaesv(ref reader);
                dictionary[key] = value;
            }
            return dictionary;
        }
        protected static (int, int, int, int) ReadType_riiiiz(ref Reader reader)
        {
            return (reader.ReadInt32(), reader.ReadInt32(), reader.ReadInt32(), reader.ReadInt32());
        }
        protected static void WriteType_arsuuz(ref MessageWriter writer, (string, uint, uint)[] value)
        {
            ArrayStart arrayStart = writer.WriteArrayStart(DBusType.Struct);
            foreach (var item in value)
            {
                WriteType_rsuuz(ref writer, item);
            }
            writer.WriteArrayEnd(arrayStart);
        }
        protected static void WriteType_rsuuz(ref MessageWriter writer, (string, uint, uint) value)
        {
            writer.WriteStructureStart();
            writer.WriteString(value.Item1);
            writer.WriteUInt32(value.Item2);
            writer.WriteUInt32(value.Item3);
        }
        protected static void WriteType_riiz(ref MessageWriter writer, (int, int) value)
        {
            writer.WriteStructureStart();
            writer.WriteInt32(value.Item1);
            writer.WriteInt32(value.Item2);
        }
        protected static void WriteType_aruiiiuauaesvz(ref MessageWriter writer, (uint, int, int, int, uint, uint[], Dictionary<string, Variant>)[] value)
        {
            ArrayStart arrayStart = writer.WriteArrayStart(DBusType.Struct);
            foreach (var item in value)
            {
                WriteType_ruiiiuauaesvz(ref writer, item);
            }
            writer.WriteArrayEnd(arrayStart);
        }
        protected static void WriteType_ruiiiuauaesvz(ref MessageWriter writer, (uint, int, int, int, uint, uint[], Dictionary<string, Variant>) value)
        {
            writer.WriteStructureStart();
            writer.WriteUInt32(value.Item1);
            writer.WriteInt32(value.Item2);
            writer.WriteInt32(value.Item3);
            writer.WriteInt32(value.Item4);
            writer.WriteUInt32(value.Item5);
            writer.WriteArray(value.Item6);
            writer.WriteDictionary(value.Item7);
        }
        protected static void WriteType_aruaesvz(ref MessageWriter writer, (uint, Dictionary<string, Variant>)[] value)
        {
            ArrayStart arrayStart = writer.WriteArrayStart(DBusType.Struct);
            foreach (var item in value)
            {
                WriteType_ruaesvz(ref writer, item);
            }
            writer.WriteArrayEnd(arrayStart);
        }
        protected static void WriteType_ruaesvz(ref MessageWriter writer, (uint, Dictionary<string, Variant>) value)
        {
            writer.WriteStructureStart();
            writer.WriteUInt32(value.Item1);
            writer.WriteDictionary(value.Item2);
        }
        protected static void WriteType_ariidubarssaesvzz(ref MessageWriter writer, (int, int, double, uint, bool, (string, string, Dictionary<string, Variant>)[])[] value)
        {
            ArrayStart arrayStart = writer.WriteArrayStart(DBusType.Struct);
            foreach (var item in value)
            {
                WriteType_riidubarssaesvzz(ref writer, item);
            }
            writer.WriteArrayEnd(arrayStart);
        }
        protected static void WriteType_riidubarssaesvzz(ref MessageWriter writer, (int, int, double, uint, bool, (string, string, Dictionary<string, Variant>)[]) value)
        {
            writer.WriteStructureStart();
            writer.WriteInt32(value.Item1);
            writer.WriteInt32(value.Item2);
            writer.WriteDouble(value.Item3);
            writer.WriteUInt32(value.Item4);
            writer.WriteBool(value.Item5);
            WriteType_arssaesvz(ref writer, value.Item6);
        }
        protected static void WriteType_arssaesvz(ref MessageWriter writer, (string, string, Dictionary<string, Variant>)[] value)
        {
            ArrayStart arrayStart = writer.WriteArrayStart(DBusType.Struct);
            foreach (var item in value)
            {
                WriteType_rssaesvz(ref writer, item);
            }
            writer.WriteArrayEnd(arrayStart);
        }
        protected static void WriteType_rssaesvz(ref MessageWriter writer, (string, string, Dictionary<string, Variant>) value)
        {
            writer.WriteStructureStart();
            writer.WriteString(value.Item1);
            writer.WriteString(value.Item2);
            writer.WriteDictionary(value.Item3);
        }
        protected static void WriteType_rtttttttttz(ref MessageWriter writer, (ulong, ulong, ulong, ulong, ulong, ulong, ulong, ulong, ulong) value)
        {
            writer.WriteStructureStart();
            writer.WriteUInt64(value.Item1);
            writer.WriteUInt64(value.Item2);
            writer.WriteUInt64(value.Item3);
            writer.WriteUInt64(value.Item4);
            writer.WriteUInt64(value.Item5);
            writer.WriteUInt64(value.Item6);
            writer.WriteUInt64(value.Item7);
            writer.WriteUInt64(value.Rest.Item1);
            writer.WriteUInt64(value.Rest.Item2);
        }
    }
    class PropertyChanges<TProperties>
    {
        public PropertyChanges(TProperties properties, string[] invalidated, string[] changed)
        	=> (Properties, Invalidated, Changed) = (properties, invalidated, changed);
        public TProperties Properties { get; }
        public string[] Invalidated { get; }
        public string[] Changed { get; }
        public bool HasChanged(string property) => Array.IndexOf(Changed, property) != -1;
        public bool IsInvalidated(string property) => Array.IndexOf(Invalidated, property) != -1;
    }
}
